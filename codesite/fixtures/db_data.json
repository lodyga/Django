[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2024-04-19T14:40:49.455Z", "user": 1, "content_type": 25, "object_id": "1", "object_repr": "Array", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2024-04-19T14:44:16.766Z", "user": 1, "content_type": 26, "object_id": "1", "object_repr": "1. Two Sum", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2024-04-19T14:52:36.202Z", "user": 1, "content_type": 26, "object_id": "2", "object_repr": "167. Two Sum II - Input Array Is Sorted", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2024-04-19T14:54:12.944Z", "user": 1, "content_type": 26, "object_id": "2", "object_repr": "167. Two Sum II - Input Array Is Sorted", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Testcase\"]}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2024-04-19T14:54:46.941Z", "user": 1, "content_type": 26, "object_id": "1", "object_repr": "1. Two Sum", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\", \"Testcase\"]}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2024-04-19T14:56:57.212Z", "user": 1, "content_type": 25, "object_id": "6", "object_repr": "String", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2024-04-19T14:57:02.136Z", "user": 1, "content_type": 25, "object_id": "7", "object_repr": "Stack", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2024-04-19T14:57:37.458Z", "user": 1, "content_type": 26, "object_id": "3", "object_repr": "20. Valid Parentheses", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2024-04-19T14:58:06.512Z", "user": 1, "content_type": 26, "object_id": "3", "object_repr": "20. Valid Parentheses", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Is solved\", \"Solution\", \"Testcase\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2024-04-19T15:39:51.844Z", "user": 1, "content_type": 26, "object_id": "4", "object_repr": "# Directions Reduction", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2024-04-19T15:40:03.598Z", "user": 1, "content_type": 26, "object_id": "4", "object_repr": "Directions Reduction", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2024-04-20T21:32:58.437Z", "user": 1, "content_type": 26, "object_id": "5", "object_repr": "125. Valid Palindrome", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2024-04-21T14:06:30.631Z", "user": 1, "content_type": 25, "object_id": "9", "object_repr": "String", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2024-04-21T14:32:19.516Z", "user": 1, "content_type": 26, "object_id": "7", "object_repr": "1221. Split a String in Balanced Strings", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2024-04-21T14:35:02.021Z", "user": 1, "content_type": 26, "object_id": "1", "object_repr": "1. Two Sum", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2024-04-23T11:57:40.520Z", "user": 1, "content_type": 22, "object_id": "2", "object_repr": "krzysztof", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2024-04-23T12:59:22.454Z", "user": 1, "content_type": 26, "object_id": "7", "object_repr": "Split a String in Balanced Strings", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2024-04-23T12:59:30.001Z", "user": 1, "content_type": 26, "object_id": "6", "object_repr": "Valid Palindrome", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2024-04-23T12:59:37.553Z", "user": 1, "content_type": 26, "object_id": "3", "object_repr": "Valid Parentheses", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2024-04-23T12:59:44.286Z", "user": 1, "content_type": 26, "object_id": "2", "object_repr": "Two Sum II - Input Array Is Sorted", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2024-04-23T12:59:52.411Z", "user": 1, "content_type": 26, "object_id": "1", "object_repr": "Two Sum", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2024-04-23T15:32:17.011Z", "user": 1, "content_type": 26, "object_id": "8", "object_repr": "Sum of Pairs", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2024-04-24T13:19:47.573Z", "user": 1, "content_type": 26, "object_id": "6", "object_repr": "Valid Palindrome", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2024-04-24T13:22:44.360Z", "user": 1, "content_type": 26, "object_id": "6", "object_repr": "Valid Palindrome", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2024-04-29T21:00:40.269Z", "user": 1, "content_type": 25, "object_id": "16", "object_repr": "Easy", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2024-04-29T21:00:57.685Z", "user": 1, "content_type": 25, "object_id": "16", "object_repr": "Easy", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2024-04-29T21:01:04.316Z", "user": 1, "content_type": 34, "object_id": "1", "object_repr": "Easy", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2024-04-29T21:01:15.054Z", "user": 1, "content_type": 34, "object_id": "2", "object_repr": "Medium", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2024-04-29T21:01:19.981Z", "user": 1, "content_type": 34, "object_id": "3", "object_repr": "Hard", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2024-04-29T21:02:36.812Z", "user": 1, "content_type": 34, "object_id": "4", "object_repr": "Impossible", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2024-04-29T21:14:14.669Z", "user": 1, "content_type": 34, "object_id": "5", "object_repr": "Easy", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2024-04-29T21:14:25.639Z", "user": 1, "content_type": 34, "object_id": "5", "object_repr": "Easy", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2024-04-30T11:00:17.903Z", "user": 1, "content_type": 36, "object_id": "1", "object_repr": "Easy", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2024-04-30T11:00:29.357Z", "user": 1, "content_type": 36, "object_id": "2", "object_repr": "Medium", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2024-04-30T11:00:43.824Z", "user": 1, "content_type": 36, "object_id": "3", "object_repr": "Hard", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2024-04-30T11:01:24.131Z", "user": 1, "content_type": 35, "object_id": "1", "object_repr": "Database", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2024-04-30T11:06:20.578Z", "user": 1, "content_type": 37, "object_id": "1", "object_repr": "Combine Two Tables", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2024-05-08T21:42:19.427Z", "user": 1, "content_type": 38, "object_id": "1", "object_repr": "O(1)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2024-05-08T21:42:27.811Z", "user": 1, "content_type": 38, "object_id": "2", "object_repr": "O(n)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2024-05-08T21:59:42.067Z", "user": 1, "content_type": 26, "object_id": "2", "object_repr": "Two Sum II - Input Array Is Sorted", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Space complexity\", \"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2024-05-08T22:01:17.514Z", "user": 1, "content_type": 26, "object_id": "6", "object_repr": "Valid Palindrome", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Space complexity\", \"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2024-05-08T22:03:45.257Z", "user": 1, "content_type": 38, "object_id": "3", "object_repr": "O(n2)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2024-05-08T22:03:53.344Z", "user": 1, "content_type": 38, "object_id": "4", "object_repr": "O(logn)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2024-05-08T22:04:02.115Z", "user": 1, "content_type": 38, "object_id": "5", "object_repr": "O(nlog)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2024-05-08T22:05:11.486Z", "user": 1, "content_type": 26, "object_id": "10", "object_repr": "Unique Paths", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Time complexity\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2024-05-08T22:05:56.472Z", "user": 1, "content_type": 26, "object_id": "12", "object_repr": "Valid Anagram", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2024-05-08T22:06:09.788Z", "user": 1, "content_type": 26, "object_id": "13", "object_repr": "Group Anagrams", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Time complexity\", \"Space complexity\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2024-05-08T22:18:35.423Z", "user": 1, "content_type": 26, "object_id": "16", "object_repr": "3Sum", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Time complexity\"]}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2024-05-08T22:19:46.769Z", "user": 1, "content_type": 26, "object_id": "15", "object_repr": "Longest Consecutive Sequence", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Url\"]}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2024-05-08T22:24:48.954Z", "user": 1, "content_type": 26, "object_id": "17", "object_repr": "Container With Most Water", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "auth.permission", "pk": 73, "fields": {"name": "Can add log entry", "content_type": 19, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 74, "fields": {"name": "Can change log entry", "content_type": 19, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 75, "fields": {"name": "Can delete log entry", "content_type": 19, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 76, "fields": {"name": "Can view log entry", "content_type": 19, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 77, "fields": {"name": "Can add permission", "content_type": 20, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 78, "fields": {"name": "Can change permission", "content_type": 20, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 79, "fields": {"name": "Can delete permission", "content_type": 20, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 80, "fields": {"name": "Can view permission", "content_type": 20, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 81, "fields": {"name": "Can add group", "content_type": 21, "codename": "add_group"}}, {"model": "auth.permission", "pk": 82, "fields": {"name": "Can change group", "content_type": 21, "codename": "change_group"}}, {"model": "auth.permission", "pk": 83, "fields": {"name": "Can delete group", "content_type": 21, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 84, "fields": {"name": "Can view group", "content_type": 21, "codename": "view_group"}}, {"model": "auth.permission", "pk": 85, "fields": {"name": "Can add user", "content_type": 22, "codename": "add_user"}}, {"model": "auth.permission", "pk": 86, "fields": {"name": "Can change user", "content_type": 22, "codename": "change_user"}}, {"model": "auth.permission", "pk": 87, "fields": {"name": "Can delete user", "content_type": 22, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 88, "fields": {"name": "Can view user", "content_type": 22, "codename": "view_user"}}, {"model": "auth.permission", "pk": 89, "fields": {"name": "Can add content type", "content_type": 23, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 90, "fields": {"name": "Can change content type", "content_type": 23, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 91, "fields": {"name": "Can delete content type", "content_type": 23, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 92, "fields": {"name": "Can view content type", "content_type": 23, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 93, "fields": {"name": "Can add session", "content_type": 24, "codename": "add_session"}}, {"model": "auth.permission", "pk": 94, "fields": {"name": "Can change session", "content_type": 24, "codename": "change_session"}}, {"model": "auth.permission", "pk": 95, "fields": {"name": "Can delete session", "content_type": 24, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 96, "fields": {"name": "Can view session", "content_type": 24, "codename": "view_session"}}, {"model": "auth.permission", "pk": 97, "fields": {"name": "Can add tag", "content_type": 25, "codename": "add_tag"}}, {"model": "auth.permission", "pk": 98, "fields": {"name": "Can change tag", "content_type": 25, "codename": "change_tag"}}, {"model": "auth.permission", "pk": 99, "fields": {"name": "Can delete tag", "content_type": 25, "codename": "delete_tag"}}, {"model": "auth.permission", "pk": 100, "fields": {"name": "Can view tag", "content_type": 25, "codename": "view_tag"}}, {"model": "auth.permission", "pk": 101, "fields": {"name": "Can add problem", "content_type": 26, "codename": "add_problem"}}, {"model": "auth.permission", "pk": 102, "fields": {"name": "Can change problem", "content_type": 26, "codename": "change_problem"}}, {"model": "auth.permission", "pk": 103, "fields": {"name": "Can delete problem", "content_type": 26, "codename": "delete_problem"}}, {"model": "auth.permission", "pk": 104, "fields": {"name": "Can view problem", "content_type": 26, "codename": "view_problem"}}, {"model": "auth.permission", "pk": 105, "fields": {"name": "Can add association", "content_type": 27, "codename": "add_association"}}, {"model": "auth.permission", "pk": 106, "fields": {"name": "Can change association", "content_type": 27, "codename": "change_association"}}, {"model": "auth.permission", "pk": 107, "fields": {"name": "Can delete association", "content_type": 27, "codename": "delete_association"}}, {"model": "auth.permission", "pk": 108, "fields": {"name": "Can view association", "content_type": 27, "codename": "view_association"}}, {"model": "auth.permission", "pk": 109, "fields": {"name": "Can add code", "content_type": 28, "codename": "add_code"}}, {"model": "auth.permission", "pk": 110, "fields": {"name": "Can change code", "content_type": 28, "codename": "change_code"}}, {"model": "auth.permission", "pk": 111, "fields": {"name": "Can delete code", "content_type": 28, "codename": "delete_code"}}, {"model": "auth.permission", "pk": 112, "fields": {"name": "Can view code", "content_type": 28, "codename": "view_code"}}, {"model": "auth.permission", "pk": 113, "fields": {"name": "Can add nonce", "content_type": 29, "codename": "add_nonce"}}, {"model": "auth.permission", "pk": 114, "fields": {"name": "Can change nonce", "content_type": 29, "codename": "change_nonce"}}, {"model": "auth.permission", "pk": 115, "fields": {"name": "Can delete nonce", "content_type": 29, "codename": "delete_nonce"}}, {"model": "auth.permission", "pk": 116, "fields": {"name": "Can view nonce", "content_type": 29, "codename": "view_nonce"}}, {"model": "auth.permission", "pk": 117, "fields": {"name": "Can add user social auth", "content_type": 30, "codename": "add_usersocialauth"}}, {"model": "auth.permission", "pk": 118, "fields": {"name": "Can change user social auth", "content_type": 30, "codename": "change_usersocialauth"}}, {"model": "auth.permission", "pk": 119, "fields": {"name": "Can delete user social auth", "content_type": 30, "codename": "delete_usersocialauth"}}, {"model": "auth.permission", "pk": 120, "fields": {"name": "Can view user social auth", "content_type": 30, "codename": "view_usersocialauth"}}, {"model": "auth.permission", "pk": 121, "fields": {"name": "Can add partial", "content_type": 31, "codename": "add_partial"}}, {"model": "auth.permission", "pk": 122, "fields": {"name": "Can change partial", "content_type": 31, "codename": "change_partial"}}, {"model": "auth.permission", "pk": 123, "fields": {"name": "Can delete partial", "content_type": 31, "codename": "delete_partial"}}, {"model": "auth.permission", "pk": 124, "fields": {"name": "Can view partial", "content_type": 31, "codename": "view_partial"}}, {"model": "auth.permission", "pk": 125, "fields": {"name": "Can add tag", "content_type": 32, "codename": "add_tag"}}, {"model": "auth.permission", "pk": 126, "fields": {"name": "Can change tag", "content_type": 32, "codename": "change_tag"}}, {"model": "auth.permission", "pk": 127, "fields": {"name": "Can delete tag", "content_type": 32, "codename": "delete_tag"}}, {"model": "auth.permission", "pk": 128, "fields": {"name": "Can view tag", "content_type": 32, "codename": "view_tag"}}, {"model": "auth.permission", "pk": 129, "fields": {"name": "Can add tagged item", "content_type": 33, "codename": "add_taggeditem"}}, {"model": "auth.permission", "pk": 130, "fields": {"name": "Can change tagged item", "content_type": 33, "codename": "change_taggeditem"}}, {"model": "auth.permission", "pk": 131, "fields": {"name": "Can delete tagged item", "content_type": 33, "codename": "delete_taggeditem"}}, {"model": "auth.permission", "pk": 132, "fields": {"name": "Can view tagged item", "content_type": 33, "codename": "view_taggeditem"}}, {"model": "auth.permission", "pk": 133, "fields": {"name": "Can add difficulty", "content_type": 34, "codename": "add_difficulty"}}, {"model": "auth.permission", "pk": 134, "fields": {"name": "Can change difficulty", "content_type": 34, "codename": "change_difficulty"}}, {"model": "auth.permission", "pk": 135, "fields": {"name": "Can delete difficulty", "content_type": 34, "codename": "delete_difficulty"}}, {"model": "auth.permission", "pk": 136, "fields": {"name": "Can view difficulty", "content_type": 34, "codename": "view_difficulty"}}, {"model": "auth.permission", "pk": 137, "fields": {"name": "Can add tag", "content_type": 35, "codename": "add_tag"}}, {"model": "auth.permission", "pk": 138, "fields": {"name": "Can change tag", "content_type": 35, "codename": "change_tag"}}, {"model": "auth.permission", "pk": 139, "fields": {"name": "Can delete tag", "content_type": 35, "codename": "delete_tag"}}, {"model": "auth.permission", "pk": 140, "fields": {"name": "Can view tag", "content_type": 35, "codename": "view_tag"}}, {"model": "auth.permission", "pk": 141, "fields": {"name": "Can add difficulty", "content_type": 36, "codename": "add_difficulty"}}, {"model": "auth.permission", "pk": 142, "fields": {"name": "Can change difficulty", "content_type": 36, "codename": "change_difficulty"}}, {"model": "auth.permission", "pk": 143, "fields": {"name": "Can delete difficulty", "content_type": 36, "codename": "delete_difficulty"}}, {"model": "auth.permission", "pk": 144, "fields": {"name": "Can view difficulty", "content_type": 36, "codename": "view_difficulty"}}, {"model": "auth.permission", "pk": 145, "fields": {"name": "Can add problem", "content_type": 37, "codename": "add_problem"}}, {"model": "auth.permission", "pk": 146, "fields": {"name": "Can change problem", "content_type": 37, "codename": "change_problem"}}, {"model": "auth.permission", "pk": 147, "fields": {"name": "Can delete problem", "content_type": 37, "codename": "delete_problem"}}, {"model": "auth.permission", "pk": 148, "fields": {"name": "Can view problem", "content_type": 37, "codename": "view_problem"}}, {"model": "auth.permission", "pk": 149, "fields": {"name": "Can add complexity", "content_type": 38, "codename": "add_complexity"}}, {"model": "auth.permission", "pk": 150, "fields": {"name": "Can change complexity", "content_type": 38, "codename": "change_complexity"}}, {"model": "auth.permission", "pk": 151, "fields": {"name": "Can delete complexity", "content_type": 38, "codename": "delete_complexity"}}, {"model": "auth.permission", "pk": 152, "fields": {"name": "Can view complexity", "content_type": 38, "codename": "view_complexity"}}, {"model": "auth.permission", "pk": 153, "fields": {"name": "Can add bug comment", "content_type": 39, "codename": "add_bugcomment"}}, {"model": "auth.permission", "pk": 154, "fields": {"name": "Can change bug comment", "content_type": 39, "codename": "change_bugcomment"}}, {"model": "auth.permission", "pk": 155, "fields": {"name": "Can delete bug comment", "content_type": 39, "codename": "delete_bugcomment"}}, {"model": "auth.permission", "pk": 156, "fields": {"name": "Can view bug comment", "content_type": 39, "codename": "view_bugcomment"}}, {"model": "auth.permission", "pk": 157, "fields": {"name": "Can add feature comment", "content_type": 40, "codename": "add_featurecomment"}}, {"model": "auth.permission", "pk": 158, "fields": {"name": "Can change feature comment", "content_type": 40, "codename": "change_featurecomment"}}, {"model": "auth.permission", "pk": 159, "fields": {"name": "Can delete feature comment", "content_type": 40, "codename": "delete_featurecomment"}}, {"model": "auth.permission", "pk": 160, "fields": {"name": "Can view feature comment", "content_type": 40, "codename": "view_featurecomment"}}, {"model": "auth.permission", "pk": 161, "fields": {"name": "Can add feature forum", "content_type": 41, "codename": "add_featureforum"}}, {"model": "auth.permission", "pk": 162, "fields": {"name": "Can change feature forum", "content_type": 41, "codename": "change_featureforum"}}, {"model": "auth.permission", "pk": 163, "fields": {"name": "Can delete feature forum", "content_type": 41, "codename": "delete_featureforum"}}, {"model": "auth.permission", "pk": 164, "fields": {"name": "Can view feature forum", "content_type": 41, "codename": "view_featureforum"}}, {"model": "auth.permission", "pk": 165, "fields": {"name": "Can add bug forum", "content_type": 42, "codename": "add_bugforum"}}, {"model": "auth.permission", "pk": 166, "fields": {"name": "Can change bug forum", "content_type": 42, "codename": "change_bugforum"}}, {"model": "auth.permission", "pk": 167, "fields": {"name": "Can delete bug forum", "content_type": 42, "codename": "delete_bugforum"}}, {"model": "auth.permission", "pk": 168, "fields": {"name": "Can view bug forum", "content_type": 42, "codename": "view_bugforum"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$600000$KchrA6ITyrv7n494W7Om1d$05PPp7126WSwiAfeaCJK3KY/6XuJu9nO9uLMc4/QorY=", "last_login": "2024-06-11T20:53:38.013Z", "is_superuser": true, "username": "ukasz", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2024-04-19T12:01:01.400Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$600000$gucaPuhyLYJPEuwOO5Nvhf$DyXh3PBPlrxiIZaLrOlgJptLfDZYuZ57AhxcMLg1LEg=", "last_login": null, "is_superuser": false, "username": "krzysztof", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2024-04-23T11:57:39.814Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 3, "fields": {"password": "!5v5MxqmcB1XlkaEuGxDVT414NCVUKOE6kbCJXm4O", "last_login": "2024-06-12T15:37:54.912Z", "is_superuser": false, "username": "lodyga", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2024-05-05T14:38:54.568Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 4, "fields": {"password": "!2gJvpwsJN4GqVhhlUGbscPrHaTU0FlPk2WQHPN7Q", "last_login": "2024-06-10T18:54:02.251Z", "is_superuser": false, "username": "krzysztofskorupski", "first_name": "Krzysztof", "last_name": "Skorupski", "email": "", "is_staff": false, "is_active": true, "date_joined": "2024-05-30T22:42:58.998Z", "groups": [], "user_permissions": []}}, {"model": "contenttypes.contenttype", "pk": 19, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 20, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 21, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 22, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 23, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 24, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 25, "fields": {"app_label": "python_problems", "model": "tag"}}, {"model": "contenttypes.contenttype", "pk": 26, "fields": {"app_label": "python_problems", "model": "problem"}}, {"model": "contenttypes.contenttype", "pk": 27, "fields": {"app_label": "social_django", "model": "association"}}, {"model": "contenttypes.contenttype", "pk": 28, "fields": {"app_label": "social_django", "model": "code"}}, {"model": "contenttypes.contenttype", "pk": 29, "fields": {"app_label": "social_django", "model": "nonce"}}, {"model": "contenttypes.contenttype", "pk": 30, "fields": {"app_label": "social_django", "model": "usersocialauth"}}, {"model": "contenttypes.contenttype", "pk": 31, "fields": {"app_label": "social_django", "model": "partial"}}, {"model": "contenttypes.contenttype", "pk": 32, "fields": {"app_label": "taggit", "model": "tag"}}, {"model": "contenttypes.contenttype", "pk": 33, "fields": {"app_label": "taggit", "model": "taggeditem"}}, {"model": "contenttypes.contenttype", "pk": 34, "fields": {"app_label": "python_problems", "model": "difficulty"}}, {"model": "contenttypes.contenttype", "pk": 35, "fields": {"app_label": "sql_problems", "model": "tag"}}, {"model": "contenttypes.contenttype", "pk": 36, "fields": {"app_label": "sql_problems", "model": "difficulty"}}, {"model": "contenttypes.contenttype", "pk": 37, "fields": {"app_label": "sql_problems", "model": "problem"}}, {"model": "contenttypes.contenttype", "pk": 38, "fields": {"app_label": "python_problems", "model": "complexity"}}, {"model": "contenttypes.contenttype", "pk": 39, "fields": {"app_label": "forums", "model": "bugcomment"}}, {"model": "contenttypes.contenttype", "pk": 40, "fields": {"app_label": "forums", "model": "featurecomment"}}, {"model": "contenttypes.contenttype", "pk": 41, "fields": {"app_label": "forums", "model": "featureforum"}}, {"model": "contenttypes.contenttype", "pk": 42, "fields": {"app_label": "forums", "model": "bugforum"}}, {"model": "sessions.session", "pk": "0b1oobo045ticz4esun17dsymnmpm9d5", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1sBiEq:owKvbkEQN6sXExoCBTvD_oSd5LYJwRkVgHjD0nfc52E", "expire_date": "2024-06-10T21:50:40.613Z"}}, {"model": "sessions.session", "pk": "0hxs11vihsks794y8pqae1rs8gv2zb3h", "fields": {"session_data": ".eJxVjMsOgjAQRf-la4NteRRc6kLjg6gLg27ItDMR1BQjJRCN_y4kbNyee879MEudYzM2ZRN2LV3R6Lx24KhH-O52ly1J0R7axWOzTvX-fDxB9uTBMrXZqi9yaFyRNzW98hL7RPwzDeZOdhjwBvZaeaay7lVqb1C8ca29XYX0mI_u30EBddHXcaJiCVz6KJLYcBQYRorIxKhEJDWEQgIpP5ARqjBRRoRcBmAS5QufFHH2_QFB5kp2:1s6cf3:suwW4BBW-fWI3KBqK8ZcXYEtkKk2MCHrrt8iw22xIT0", "expire_date": "2024-05-27T20:52:41.928Z"}}, {"model": "sessions.session", "pk": "18akushdugpl53neder08kmxz4a0e3vr", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvOC91cGRhdGUvIiwiZ2l0aHViX3N0YXRlIjoiM2Zzc1UzNU5lcjVzaGVCbFQ0SktBTmQxNnFJWDRpVTkifQ:1sCbLD:skzM8N89KenSPFiRw-alBVRogNzv-xRkaj6l9Opd9fA", "expire_date": "2024-06-13T08:40:55.153Z"}}, {"model": "sessions.session", "pk": "1ep8pgbh4ouzt99f3ik1kp5piv7x3qxx", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9maW5kLW1pbmltdW0taW4tcm90YXRlZC1zb3J0ZWQtYXJyYXkvIiwiZ2l0aHViX3N0YXRlIjoiOFFTOEY1U29MZ1FKdTB3Znd3ZWVuOEFLVkRKb1VGVmQifQ:1sCryc:iRDfQ11zSfwqeFBpWDc9kONtU5mDUMHra8mObvfO39o", "expire_date": "2024-06-14T02:26:42.263Z"}}, {"model": "sessions.session", "pk": "1npgwv29r713o03qzy684toy7isecdjh", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9jb250YWluZXItd2l0aC1tb3N0LXdhdGVyLyIsImdpdGh1Yl9zdGF0ZSI6IlZLSlNQZXdGOVFKOVNSYkpCQW93UDlNcmZCdFJhN01GIn0:1sCt0R:Uvm8AsptI6fFFsegCveWYvkcaIU3s5BJoew1lVKPLkY", "expire_date": "2024-06-14T03:32:39.493Z"}}, {"model": "sessions.session", "pk": "2n8zunj4p4st4rooo94v9ewjr1rbsf2a", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMjMvZGVsZXRlLyIsImdpdGh1Yl9zdGF0ZSI6IlI0WXhVNDc4aEFvS0V0V0djQmNNRGtWM1NJWFNrcjh6In0:1sCsvm:3L_93V4YIpdLihDys9I61e8r-v9ffRRrJMZj0_Lw5o0", "expire_date": "2024-06-14T03:27:50.655Z"}}, {"model": "sessions.session", "pk": "2s6r7zvt4rftklxx56cxv863hly5f57y", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMTcvZGVsZXRlLyIsImdpdGh1Yl9zdGF0ZSI6IktXWWhnMDNqaEFPNlJVUk5NZXZXeW1Ta1FIMXNmZ3FrIn0:1sCsvV:hzssIu6R6LFOc_npzhLowP7kmGvmKDkeKLVnY0m3QRk", "expire_date": "2024-06-14T03:27:33.306Z"}}, {"model": "sessions.session", "pk": "33uqkexl2rnu6oh3t9bkupr9e3uk5yui", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1rzBbJ:hwqPlsHW6-MnURwfU1cToZnNBrBZx51mssF2GBpzjZY", "expire_date": "2024-05-07T08:34:05.056Z"}}, {"model": "sessions.session", "pk": "4c3ix64tp75pa6y0imvzmbfo3pu011d7", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1rzCL2:NvIQWXTKD0GrNhzAweA0llyiehS8Ukp0kP6-TJ8wkOo", "expire_date": "2024-05-07T09:21:20.390Z"}}, {"model": "sessions.session", "pk": "4w5nhzbgchzgn0kizqnply8k3l98n9gi", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMy9kZWxldGUvIiwiZ2l0aHViX3N0YXRlIjoiR2JZWjJnRVpUeUhxV1NvaVZ6U1lSSW9DaGhUMjJHZ0YifQ:1sCrd9:dg5VjhR6DCctGlZrutzjupgIj4_0ePeAWUADmhModos", "expire_date": "2024-06-14T02:04:31.945Z"}}, {"model": "sessions.session", "pk": "5wn4cmkoo72kwpfxu5bkw5ss0srm6ugx", "fields": {"session_data": ".eJxVjM0KgkAURt9l1mHO6Hi1pVBgYZts0Uqucy_-FAo6ihG9ewpu2p7vnO8jWp6tOIi92ImyttVY5INFyws6ylOTwvVtk1TTdCvPUD7iKcl0EM_Z5e4vRY6jrfJx4D6vaUnkPyvQPLldB2qwLTvHdK3t68JZFWdbByftiF_x5v4dVDhUSx1GECp0lUcyCo1LknQAzCYkkIEqUEuFDJ6vAgIdgZHaVT6aCDzpMbArvj_Ix0nY:1s6GGh:P0VolaHwPMFqKq4FA7ulxkmOhUIJV5yFF-ELQp2jduI", "expire_date": "2024-05-26T20:58:03.358Z"}}, {"model": "sessions.session", "pk": "6nua2yxyvf7ebmp9t2xt6vegunanxln6", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvNy91cGRhdGUvIiwiZ2l0aHViX3N0YXRlIjoienlGV0l5Q284NGdlZmlacU5CcVZnRGsxSjRNcVFsWXUifQ:1sCbL8:9ibOY2a_3kVfIBNTEQ__pR14hrbci03gqCNHsguCC7A", "expire_date": "2024-06-13T08:40:50.718Z"}}, {"model": "sessions.session", "pk": "7ea10aw0ft7wq99fav1rejn1kco4jymg", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9ob3VzZS1yb2JiZXIvIiwiZ2l0aHViX3N0YXRlIjoiZHJCblYxMzZKR0J4bDNwck5ZMzVpTmlqcWpwa0xIQ2UifQ:1sCgVc:B-pg4ecUgWC5XJc9d1oOzbnM3_nLDNSBTuX5-wrB-bQ", "expire_date": "2024-06-13T14:12:00.817Z"}}, {"model": "sessions.session", "pk": "8k201b4clhuqowbeoego3ed1v9y252eq", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1rzeSY:E0BrtXocovWbXo135fLYCppRdsU51dkP5GhKfesHnrw", "expire_date": "2024-05-08T15:22:58.023Z"}}, {"model": "sessions.session", "pk": "8z4jj9xgksd5iyqc7h8cnh69z4aoacqv", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9yZXZlcnNlLXdvcmRzLWluLWEtc3RyaW5nLWlpaS8iLCJnaXRodWJfc3RhdGUiOiJsdHdYdDFPako1WGlzWEZXd1JXM2lpNFFtQ1E2WVJPRyJ9:1sCz4x:37rZMsWhQG374aXVPYNuI43uMBPkW_lg0YDWAwjEpOo", "expire_date": "2024-06-14T10:01:43.144Z"}}, {"model": "sessions.session", "pk": "9ms8s7q72uutnd8i9h8kgja0soe79nrn", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1rzDES:tvjMGqX3E8dsJqHFUSQGV86-gOaQQ9xi5sL00MeHlGo", "expire_date": "2024-05-07T10:18:36.670Z"}}, {"model": "sessions.session", "pk": "b42ng87juijvw34gqy1ju0qjva8zymqh", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMy91cGRhdGUvIiwiZ2l0aHViX3N0YXRlIjoiR0xpSFpsU1RWcDRrVHJOeXQ0ZnVndlp0VHhzR3pTRnoifQ:1sCbL4:k0J8P0gSSvT3O-9FEZJEtt4ppqAiHdjBbnwGw-KH2r8", "expire_date": "2024-06-13T08:40:46.583Z"}}, {"model": "sessions.session", "pk": "b4ladi26pa7ci4roqi5dvc8kdqky8szy", "fields": {"session_data": ".eJxVjsuqwjAURf8lY-lN2jRtnDnwwb2IEwVn4ZwkNa2lgSa9COK_Gx8DHR1Yh7X3vpLBXiKZkx8yI6c2uglViBBtQtvxb_l_4B5KrLp-4w5-6bpL2eF-cVxtfnfJUDBFp6ZgR9WapPBvhqDPdng8gtct9Er70WZvGrJXX7Z-nt0iafm37yC4JOeVKLVgAmSNyIQ1haUGoWC8kZRXVNay0QaKSogGGUNLGS9FnVOUPDdGpNB3_zO6hxBV70_t8DHwtYXc7qp3Wmg:1sCoU7:UtVdBK0FIqpaW_qvwqwFl2JFCEnwMIsbBYwH6yLUACk", "expire_date": "2024-06-13T22:42:59.097Z"}}, {"model": "sessions.session", "pk": "bpvvviyyih7iwlsb42l457zyc1v9cj2o", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvNC91cGRhdGUvIiwiZ2l0aHViX3N0YXRlIjoic2lyMk9UcldramZoTTRnNHN0RlR5Ujluem5GZ2VZdkMifQ:1sCbL6:3-p50S0wuoxu2n1wN9LZER2gZVRKfleKqdmAPSnW2DY", "expire_date": "2024-06-13T08:40:48.642Z"}}, {"model": "sessions.session", "pk": "cpilefgdkhopybb9t3ky3mmt9gy7pbl7", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9tYXhpbXVtLXByb2R1Y3Qtc3ViYXJyYXkvIiwiZ2l0aHViX3N0YXRlIjoibDU3Ykhyc2wwRlcybDNPSnNHQkxHYkhpekZNM29QVDMifQ:1sCzJg:EBpW9UIdnUf_nVFALFX25dzR1wSrXFX8VDvRk1p1b-k", "expire_date": "2024-06-14T10:16:56.620Z"}}, {"model": "sessions.session", "pk": "cyhvwt5eqexvg6zmnd7caxvkf751s8kk", "fields": {"session_data": ".eJxVjDsOwjAQBe_iGlnxZ_2hpM8ZrF2vwQHkSHFSIe4OkVJA-2bmvUTCba1p62VJE4uzUOL0uxHmR2k74Du22yzz3NZlIrkr8qBdjjOX5-Vw_w4q9vqtwzUDZQtusAqiUojEIXhjiGGw2mKMJrC20RhwpJ1Hdt4gqwzZM5B4fwDHeTdB:1ryI0C:Jm9zmlumYKVCpA8Y1SXTuXU29ejZiOFb9JocyTzn90c", "expire_date": "2024-05-04T21:12:04.955Z"}}, {"model": "sessions.session", "pk": "d6o9f528b1ply7j83kjyfyp4tgshoale", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90cmFwcGluZy1yYWluLXdhdGVyLyIsImdpdGh1Yl9zdGF0ZSI6Im1NWmdJUm43V2FONlBVdVF5N1lNVDlEaDlZOXRzUUhUIn0:1sCrhK:eIOHkTv5utkrXup3BxqNF6GMmwDPdtknTtLekohFcUE", "expire_date": "2024-06-14T02:08:50.981Z"}}, {"model": "sessions.session", "pk": "dv4yvqvzxlytuyvwy4i4o1714bnrcsmu", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMTMvZGVsZXRlLyIsImdpdGh1Yl9zdGF0ZSI6IjdYUXVTc0JZSFptOEtaUloxaEtPdzJIWDlKTnNtejZ4In0:1sCt0L:sf0Lg3T-xjRB_c-vOpkVAoRLw9A6mkkjSr9fHTrSdgo", "expire_date": "2024-06-14T03:32:33.716Z"}}, {"model": "sessions.session", "pk": "euu4tbsjv7nevg7r488q7w76w8g7on3c", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMTMvdXBkYXRlLyIsImdpdGh1Yl9zdGF0ZSI6ImpyenA4V0dHTFA3WWxWZGJDQVZ2MVQyc25UOXluMnBRIn0:1sCbKw:emnFyxIHmpmgMNWgzKBw1le5zekLCpgyOxh11C7GgV0", "expire_date": "2024-06-13T08:40:38.337Z"}}, {"model": "sessions.session", "pk": "fkx052qqmych8t4xjx6xfsyc0dne2k7i", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMjIvdXBkYXRlLyIsImdpdGh1Yl9zdGF0ZSI6Im0yREZVdFY3NlUzVDdhZ1RoNFI3dnVyaktMQThsUXhmIn0:1sCbKu:1eVRYvKM1CjGu9MgthdSIBdRczldj1VsnhK1Hgx28i4", "expire_date": "2024-06-13T08:40:36.271Z"}}, {"model": "sessions.session", "pk": "gt78o9ka02wjgxingll27ycojqpoeybi", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvNS9kZWxldGUvIiwiZ2l0aHViX3N0YXRlIjoiVEtCbmVSTFFEbndDeHZFYmZUb0xSZTliV3NjZVBka0wifQ:1sCrcR:Cs5Zm44DL7KM_DavJZ3hsz9KX6VLiDR1oQIH6D40eCI", "expire_date": "2024-06-14T02:03:47.529Z"}}, {"model": "sessions.session", "pk": "guwhroklv2x97x6xqcfjqj8qnrv4133v", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMjMvdXBkYXRlLyIsImdpdGh1Yl9zdGF0ZSI6IkZOZVMwOWg2dVVYZjVTd0R0bjNOTzRYbDdEWll2U2ZGIn0:1sCbKq:2H8Zy8D5whzN_raLZEXKPi4nc8ZjjkltLuz2NKVJxxM", "expire_date": "2024-06-13T08:40:32.529Z"}}, {"model": "sessions.session", "pk": "hz08f8wntnmee13imvsql0g5td4vg4w8", "fields": {"session_data": ".eJxVjk1rAjEURf9L1jKazOTD7koVFy0KhZbiJry8eZkJDhkwGVRK_3tTdVFXD87j3Hu_WaRzZk9szmasC7mfnE0ZMhXU4XBqoz7wt9c97bbn_TrWH-8n-fL1qbeXsCqGhSn3dkp0tKEtSv3IHOCB4t8jjRhgsDgeqbrTVN36qs317J6LJh79HlJf5KVouCbp0UtqwWjltPfct0YorIWSWmrulwpRUAPk0BnDFw1JgQsDzqkSeu-_Rg-Qsh3GLsR_A29b2M8vBaNbew:1sH7CK:umRZslRLBmgXhaOAvY_F9TGji8HW1iS7j1SjaL9a7YQ", "expire_date": "2024-06-25T19:30:24.343Z"}}, {"model": "sessions.session", "pk": "iat8vbdcbqa90n5i4icmuw974jxbqzf0", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi91bmlxdWUtcGF0aHMvIiwiZ2l0aHViX3N0YXRlIjoiRmdubHNzWWJBY1dTQ1BhTDhuZk1ka2tHTFh4N0NXSEgifQ:1sCbL2:6tZk7bAlq-H7rMQq5PwYmO4VTlTIxhR4lrpL5flkRhw", "expire_date": "2024-06-13T08:40:44.521Z"}}, {"model": "sessions.session", "pk": "jm89eioe7qh0qix3hkiz7tw1oezmf3sy", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMjYvdXBkYXRlLyIsImdpdGh1Yl9zdGF0ZSI6IjJZUE14a0V1eEZaN3FHMDBvT0ZHYVEyVjFaNW5mTFBKIn0:1sCbKy:U945GEqBxBqDnPrPQR51V0nsB9Ua6QT58d7aTwvxdlQ", "expire_date": "2024-06-13T08:40:40.674Z"}}, {"model": "sessions.session", "pk": "kdudsuz4xn0hma66df358yjys30vsljw", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1sGGM0:WRpCkVk8-9cZewIADodgLQbsEu3Cbox-8ZKaJgDklDg", "expire_date": "2024-06-23T11:04:52.627Z"}}, {"model": "sessions.session", "pk": "l1tg1vl1e3gcv8hclddjhf7yxrhpxpt5", "fields": {"session_data": "eyJuZXh0IjoiLyIsImdpdGh1Yl9zdGF0ZSI6IjFTWFl5NlJHbmhvZWhwZno2OWozeEtVVE5nRVRJbW5CIn0:1s2TLw:VwW57aN5mkZhbnbOjaC8wIsNXour1vZrCerXybegr0o", "expire_date": "2024-05-16T10:07:48.362Z"}}, {"model": "sessions.session", "pk": "lh0w812aqxzz0vtp63zcn6djj32y5pro", "fields": {"session_data": ".eJxVjstqwzAQRf9F6-LaivVId4aQhrSQRaDxToxGo9jEsUgkQ0npv1d5LJrVwBnOvfeHjfSd2Bt7ZS9s36dusiYmSJTRVu5acMfL8fMkwrgIuGzbxcfXdu3tqjw1LhsGptSZKdLZ9C4rs2dmAQ80Xh8xYA-DwXCm4kFjce8r3m9n02SNP_sdxC7Lc15XioRHL8iBVtIq7yvvNJc441IooSo_l4icaiCLVuuqrElwLDVYK3Poo_8WPUBMZgj7fvw38L6F_f4BGVFbkw:1sHQ2s:Xm3Ozc2VjCvjO7yz7BeqYBurpbkQ822PERT68auJRSw", "expire_date": "2024-06-26T15:37:54.941Z"}}, {"model": "sessions.session", "pk": "lt0j3qyof29p641027d8cf51belx61pv", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1rzF8d:oZzCtISEYea7JLvHNPKI9HTa-fS4QTxtAVPOE4722T8", "expire_date": "2024-05-07T12:20:43.185Z"}}, {"model": "sessions.session", "pk": "lzrz45gwktjva65th3r93swxfhoncg1y", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvNi9kZWxldGUvIiwiZ2l0aHViX3N0YXRlIjoiVmpSMGZ6T0V5NllMNEpMM1dIaWJXR3VndXNWRjJpMGEifQ:1sCt0V:SOhPLpGrCFC7qXwYk890M2dbAVrv5DA5BXjSA9jfUHM", "expire_date": "2024-06-14T03:32:43.947Z"}}, {"model": "sessions.session", "pk": "mz1t0r2ivcpt3pw4ydlbqwmuc8gc6p9q", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9zcGxpdC1hLXN0cmluZy1pbi1iYWxhbmNlZC1zdHJpbmdzLyIsImdpdGh1Yl9zdGF0ZSI6Iks4SmRGSFo1bHpsU1NZaGk5VGQ3WGZrN2JGUzZqcXYwIn0:1sCJsP:wz4kwPCGnb_hxNtHnO9D1hDCWWj15NmGx01A-RIRgVU", "expire_date": "2024-06-12T14:02:01.579Z"}}, {"model": "sessions.session", "pk": "oc6kfkiltm42gka0gttsyb53rofpwcg0", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvOC9kZWxldGUvIiwiZ2l0aHViX3N0YXRlIjoiS3lDVlZZd0FQT1Y0NXZ6RzBTaVp1SFBZQnVSTmoxYUMifQ:1sCsve:_0JeN5FpDJcymGJskBwCF0LlXgrzJsFWB1K8BgnDKEs", "expire_date": "2024-06-14T03:27:42.065Z"}}, {"model": "sessions.session", "pk": "oswou1veyhrycjrqcq2ax19kri5hgmt3", "fields": {"session_data": "eyJuZXh0IjoiLyIsImdpdGh1Yl9zdGF0ZSI6IkM0cDZGYUJqNnVSdndQWUpYVld6TGlrb1FmZDNaSTNPIn0:1s2UBK:B7idN7v7C2afKDyLSEu0zWZlODRLXT8uHomqpAFSPaw", "expire_date": "2024-05-16T11:00:54.785Z"}}, {"model": "sessions.session", "pk": "q3284j8x1z6p02awyobv66kxgptkpbrt", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9sb25nZXN0LXN1YnN0cmluZy13aXRob3V0LXJlcGVhdGluZy1jaGFyYWN0ZXJzLyIsImdpdGh1Yl9zdGF0ZSI6ImFyV2JIMjltc1ZDSWo3RHZtcHpKOVlEbmZpT2l5UEJ0In0:1sCecS:jxyUrE5RzpkPbBeFeQjbTAtzL6M5Q1DmW8yYapMBsS4", "expire_date": "2024-06-13T12:10:56.833Z"}}, {"model": "sessions.session", "pk": "qoj7ubqjjsrwafnnzoqevr37l5g19za3", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9mbG9vZC1kZXB0aC8iLCJnaXRodWJfc3RhdGUiOiJyRUV6ZHhGc0pxOFNTRFZkd2Q1OWUzU2hYbUptbHlGSSJ9:1sCrhc:IMVVcqe-Iv73kXED5-W9xZxGTvg0pR6zERKbL6TZbpE", "expire_date": "2024-06-14T02:09:08.826Z"}}, {"model": "sessions.session", "pk": "r645kp2aumfi9yab7yv5bftxk1hb2txh", "fields": {"session_data": ".eJxVjruOwjAQRf_F9SokTvyADlHQILFbpIDGGk_GOLuRI2JHWu2Kf8c8CqhGOqNz7_1ngX4TW7EF-2CnPvnZmpggUUYeaiqP07E9tEHi3Daf-104b85ff2E74XeZDQNz8maONJm-y0r9zizgD4XbI47Yw2BwnKh40lg8-ort_ezXWePvvofos7zkTaVIOHSCOtBKWuVc5TrNJdZcCiVU5ZYSkVMDZNFqXZUNCY6lBmtlDn3236MHiMkM46kPLwMfW9jlCjbDW7s:1sGbYC:9jtBFd5cjsdCH9AhmmhpIkJsWH8B6jICzWL6-PCEHMY", "expire_date": "2024-06-24T09:42:52.573Z"}}, {"model": "sessions.session", "pk": "r8ytrnvb23rd9z0yb3ptjif5ysrrzsem", "fields": {"session_data": "eyJuZXh0IjoiLyIsImdpdGh1Yl9zdGF0ZSI6IktZbGdaU09nZm80bTM5WWpZclZLMjRteWNGOGVwbXREIn0:1s2TkU:4KsTNGGisl60JyMZezhxGSkZV74ygCTgz7YV4LFbZIU", "expire_date": "2024-05-16T10:33:10.304Z"}}, {"model": "sessions.session", "pk": "rd8iedosiyxkr9e3kyqrtthyrv2i63o4", "fields": {"session_data": ".eJxVjDsOwjAQBe_iGlnxZ_2hpM8ZrF2vwQHkSHFSIe4OkVJA-2bmvUTCba1p62VJE4uzUOL0uxHmR2k74Du22yzz3NZlIrkr8qBdjjOX5-Vw_w4q9vqtwzUDZQtusAqiUojEIXhjiGGw2mKMJrC20RhwpJ1Hdt4gqwzZM5B4fwDHeTdB:1ryUd9:R2QhyUZJ2YBiPDZvQjmO-juFdtMe9qsir6s3TRKqi6U", "expire_date": "2024-05-05T10:41:07.326Z"}}, {"model": "sessions.session", "pk": "rofmjikolgca6l8lnlic9x137fv4299d", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMjYvZGVsZXRlLyIsImdpdGh1Yl9zdGF0ZSI6InF3dVp6N3JhMHBPcjFKbnJoSXRTcWhjTGZ6NDZTYmt6In0:1sCsvv:Xx7x0WW10nSNgNLraDoDaJh10FeVi1UlvMLMoXUGFh0", "expire_date": "2024-06-14T03:27:59.497Z"}}, {"model": "sessions.session", "pk": "shmti4yr9qvh9bjmttc6uqmbzyfust13", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi8zc3VtLyIsImdpdGh1Yl9zdGF0ZSI6ImJSRjA0Q2JPUDFESVdvRjFDQW9pbzlvOUp2blpOTlNRIn0:1sCrcr:IxDbkUx-OT1oqfV4uo1hJRRY8akwBCzx38F7VdVzmBc", "expire_date": "2024-06-14T02:04:13.999Z"}}, {"model": "sessions.session", "pk": "teq3am0p7ybi81l4avs8glh038anosyo", "fields": {"session_data": ".eJxVjstuwjAQRf_Fa5TGJn7QXbsIVVWEWCCW1ngyjqNaiYQdVKj673WBRVmNdEbn3vvNRvrK7Jk9sQXrhxxmZ1OGTAUd-vwW6v065tfT-dB-vO_4ibbTvt2B2FzaWAwLcw52TnS0Q1eU5SNzgJ80_j3ShANEi9ORqjtN1a2vWl_P9qVo4tEPkEKRV6LhmqRHL6kDo5XT3nPfGaFwKZTUUnO_UoiCGiCHzhheNyQF1gacUyX03n-NjpCyjVM_jP8G3rawn18YbluU:1sCpJr:C9cPzM67lo0hOO9purl-LFT6T0nIUNK__Wj-luG-zAU", "expire_date": "2024-06-13T23:36:27.836Z"}}, {"model": "sessions.session", "pk": "tnqxe1byywq288h9et75hs4ndl20p23h", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1s5mTL:GarFUhJUU4vDwYJEMSYtln0U6WATzVl6N9jGzZpA7Sw", "expire_date": "2024-05-25T13:09:07.171Z"}}, {"model": "sessions.session", "pk": "uiu70ztn6vzpix9ed0abl5sdq73ircgp", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAGCgMu3XuGZmAmUjU0Ke3KeHdt0oVu_3vvv9RI21rHrcsyTqzOCtTpd8tUHtJ2wHdqt1mXua3LlPWu6IN2fZ1ZnpfD_Tuo1Ou3jgmjJWMdQ4rFMLAPKFIiIwSbyYMlQTfYwOgTFvDGDlQSOnCCYtT7A8IgNuQ:1rzdf2:O9lzFTKtTPzsIAN7KBo7TsA3ORXKeQHVteKn6z7hDdA", "expire_date": "2024-05-08T14:31:48.252Z"}}, {"model": "sessions.session", "pk": "ul8fr1hyybxp2glul6xy1sd4icbti71e", "fields": {"session_data": ".eJxVjstuwjAQRf_F6yq1E2PH7FghJNSuoiYra8Z2cCBK1NiR2iD-HfNYwGqkMzr33jMZ3F8ka_JJPsihi35GHSJEl5BUy2-Y9uNXMdnd_4-XWKl6rpulgiYszTEZGubo9RzcpDubFP7OEMzJDbdHGE0HvTbj5LInDdmjL9vez_cmafm77yH4JOdSrIxgAlSJyISzhaMWoWC8VZRLqkrVGguFFKJFxtBRxleizCkqnlsrUuiz_x7dQ4i6Hw_d8DLwsYVcrmSsWz8:1sGk9a:nydjOvqkzaphtSujrdYuclrKhZa9Sdu_nO6lKVNCGVI", "expire_date": "2024-06-24T18:54:02.294Z"}}, {"model": "sessions.session", "pk": "uoo94e72luj0zitmwp0fela804sxomhx", "fields": {"session_data": "eyJuZXh0IjoiLyIsImdpdGh1Yl9zdGF0ZSI6IkFHQ3FkNzkzekhtSHp2TGg2SWhybUFEY0JqVEdtSVhXIn0:1s2UcH:VoaI0w-fftaAntCxwvUs4wlyi6kaTrfe7e4fZbzcFz8", "expire_date": "2024-05-16T11:28:45.331Z"}}, {"model": "sessions.session", "pk": "uvkwha3bqsnlzekcbq79a6c4l0mgehic", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9zdW0tb2YtcGFpcnMvIiwiZ2l0aHViX3N0YXRlIjoiTkt6ZjgwRFJKd1J3VWE3TEY5emRBYUM4blNJenM2NDQifQ:1sCszn:HUaK7nWdW706spKXXbmlgOzniVh4duykCLjlW2ikTFg", "expire_date": "2024-06-14T03:31:59.681Z"}}, {"model": "sessions.session", "pk": "vbvab03zuc7xj376fgaba2xytxjuer9p", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMTkvdXBkYXRlLyIsImdpdGh1Yl9zdGF0ZSI6ImVSZGo0MGNDc0NYS2YzVGNUeFNidDdyWktFVFlWMldDIn0:1sCbL0:VzwunI0OGydIuT1hNS4b-ra5rN5NAnJUsJu_gveoUbw", "expire_date": "2024-06-13T08:40:42.455Z"}}, {"model": "sessions.session", "pk": "wemcgqv7z57cuxlcgxjg1ln6ijvats3p", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi92YWxpZC1hbmFncmFtLyIsImdpdGh1Yl9zdGF0ZSI6ImFKV2hySFpIVHV4RmVtNXBpTzFWYzR1QmxDeXkwRWl3In0:1sCgRq:RXDHipmW15jy3fkxcK_QJTm6dnV2cN9CJGIGTlL8cw8", "expire_date": "2024-06-13T14:08:06.442Z"}}, {"model": "sessions.session", "pk": "ye3te0xiqvcksithj39dx4btea23cta3", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi9kaXJlY3Rpb25zLXJlZHVjdGlvbi8iLCJnaXRodWJfc3RhdGUiOiJVSHlhZE12V0t1dm1qQm83QnFWS1NWS1IxOGlDMnZKZiJ9:1sCecf:4q0xBlNEDjQFX7I7je6ndn84orqSqrb0tDFkx2z_TNM", "expire_date": "2024-06-13T12:11:09.596Z"}}, {"model": "sessions.session", "pk": "zqgoiwmczrjcqlnmcbk619d1xfd97wsn", "fields": {"session_data": "eyJuZXh0IjoiL3B5dGhvbi90YWcvMi9kZWxldGUvIiwiZ2l0aHViX3N0YXRlIjoibXpwV21sYUlKcTVEYnVadEtPVVk2M29QQlpBOFh0M2UifQ:1sCsze:iZ57yTjs_53U03lDuxb0Qmruh5kfgL7HSjL4krv94ss", "expire_date": "2024-06-14T03:31:50.983Z"}}, {"model": "social_django.usersocialauth", "pk": 1, "fields": {"user": 3, "provider": "github", "uid": "76163659", "extra_data": "{\"auth_time\": 1718206674, \"id\": 76163659, \"expires\": null, \"login\": \"lodyga\", \"access_token\": \"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\", \"token_type\": \"bearer\"}", "created": "2024-05-05T14:38:54.578Z", "modified": "2024-06-12T15:37:54.865Z"}}, {"model": "social_django.usersocialauth", "pk": 2, "fields": {"user": 4, "provider": "github", "uid": "45561955", "extra_data": "{\"auth_time\": 1718045642, \"id\": 45561955, \"expires\": null, \"login\": \"krzysztofskorupski\", \"access_token\": \"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\", \"token_type\": \"bearer\"}", "created": "2024-05-30T22:42:59.012Z", "modified": "2024-06-10T18:54:02.200Z"}}, {"model": "python_problems.difficulty", "pk": 1, "fields": {"name": "Easy"}}, {"model": "python_problems.difficulty", "pk": 2, "fields": {"name": "Medium"}}, {"model": "python_problems.difficulty", "pk": 3, "fields": {"name": "Hard"}}, {"model": "python_problems.difficulty", "pk": 4, "fields": {"name": "Impossible"}}, {"model": "python_problems.complexity", "pk": 1, "fields": {"name": "O(1)"}}, {"model": "python_problems.complexity", "pk": 2, "fields": {"name": "O(n)"}}, {"model": "python_problems.complexity", "pk": 3, "fields": {"name": "O(n2)"}}, {"model": "python_problems.complexity", "pk": 4, "fields": {"name": "O(logn)"}}, {"model": "python_problems.complexity", "pk": 5, "fields": {"name": "O(nlog)"}}, {"model": "python_problems.problem", "pk": 1, "fields": {"title": "Two Sum", "slug": "two-sum", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/two-sum/description/", "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\r\n\r\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\r\n\r\nYou can return the answer in any order.\r\n\r\nExample 1:\r\n\r\nInput: nums = [2,7,11,15], target = 9\r\nOutput: [0,1]\r\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].", "is_solved": true, "solution": "class Solution:\r\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\r\n        seen = {}\r\n\r\n        for ind, num in enumerate(nums):\r\n            diff = target - num\r\n            if diff in seen:\r\n                return [seen[diff], ind]\r\n            seen[num] = ind\r\n        \r\n        return None", "testcase": "(Solution().twoSum([2, 7, 11, 15], 9), [0, 1])\r\n(Solution().twoSum([3, 2, 4], 6), [1, 2])\r\n(Solution().twoSum([3, 3], 6), [0, 1])", "tags": [2, 3]}}, {"model": "python_problems.problem", "pk": 2, "fields": {"title": "Two Sum II - Input Array Is Sorted", "slug": "two-sum-ii-input-array-is-sorted", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/", "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\r\n\r\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\r\n\r\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\r\n\r\nYour solution must use only constant extra space.\r\n\r\nExample 1:\r\n\r\nInput: numbers = [2,7,11,15], target = 9\r\nOutput: [1,2]\r\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\r\nExample 2:\r\n\r\nInput: numbers = [2,3,4], target = 6\r\nOutput: [1,3]\r\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\r\nExample 3:\r\n\r\nInput: numbers = [-1,0], target = -1\r\nOutput: [1,2]\r\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].", "is_solved": true, "solution": "class Solution:\r\n    def twoSum(self, numbers: list[int], target: int) -> list[int]:\r\n        l = 0\r\n        r = len(numbers) - 1\r\n\r\n        while l < r:\r\n            edge_sum = numbers[l] + numbers[r]\r\n            if edge_sum > target:\r\n                r -= 1\r\n            elif edge_sum < target:\r\n                l += 1\r\n            else:\r\n                return [l + 1, r + 1]\r\n        \r\n        return None", "testcase": "(Solution().twoSum([2, 7, 11, 15], 9), [1, 2])\r\n(Solution().twoSum([2, 3, 4], 6), [1, 3])\r\n(Solution().twoSum([-1, 0], -1), [1, 2])", "tags": [2, 5, 4]}}, {"model": "python_problems.problem", "pk": 3, "fields": {"title": "Valid Parentheses", "slug": "valid-parentheses", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/valid-parentheses/description/", "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\r\n\r\nAn input string is valid if:\r\n\r\nOpen brackets must be closed by the same type of brackets.\r\nOpen brackets must be closed in the correct order.\r\nEvery close bracket has a corresponding open bracket of the same type.\r\n \r\n\r\nExample 1:\r\n\r\nInput: s = \"()\"\r\nOutput: true\r\nExample 2:\r\n\r\nInput: s = \"()[]{}\"\r\nOutput: true\r\nExample 3:\r\n\r\nInput: s = \"(]\"\r\nOutput: false", "is_solved": true, "solution": "class Solution:\r\n    def isValid(self, s: str) -> bool:\r\n        seen = []\r\n        oppos_bracket = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\r\n\r\n        for bracket in s:\r\n            if bracket in oppos_bracket:\r\n                if seen and oppos_bracket[bracket] == seen[-1]:\r\n                    seen.pop()\r\n                else:\r\n                    return False\r\n            else:\r\n                seen.append(bracket)\r\n        return not seen", "testcase": "(Solution().isValid(\"()\"), True)\r\n(Solution().isValid(\"({})\"), True)\r\n(Solution().isValid(\"(})\"), False)\r\n(Solution().isValid(\"([)\"), False)\r\n(Solution().isValid(\"(]\"), False)\r\n(Solution().isValid(\"\"), True)\r\n(Solution().isValid(\"[\"), False)", "tags": [7, 6]}}, {"model": "python_problems.problem", "pk": 4, "fields": {"title": "Directions Reduction", "slug": "directions-reduction", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://www.codewars.com/kata/550f22f4d758534c1100025a", "description": "Once upon a time, on a way through the old wild mountainous west,…\r\n… a man was given directions to go from one point to another. The directions were \"NORTH\", \"SOUTH\", \"WEST\", \"EAST\". Clearly \"NORTH\" and \"SOUTH\" are opposite, \"WEST\" and \"EAST\" too.\r\n\r\nGoing to one direction and coming back the opposite direction right away is a needless effort. Since this is the wild west, with dreadfull weather and not much water, it's important to save yourself some energy, otherwise you might die of thirst!\r\n\r\nHow I crossed a mountainous desert the smart way.\r\nThe directions given to the man are, for example, the following (depending on the language):\r\n\r\n[\"NORTH\", \"SOUTH\", \"SOUTH\", \"EAST\", \"WEST\", \"NORTH\", \"WEST\"].\r\nor\r\n{ \"NORTH\", \"SOUTH\", \"SOUTH\", \"EAST\", \"WEST\", \"NORTH\", \"WEST\" };\r\nor\r\n[North, South, South, East, West, North, West]\r\nYou can immediatly see that going \"NORTH\" and immediately \"SOUTH\" is not reasonable, better stay to the same place! So the task is to give to the man a simplified version of the plan. A better plan in this case is simply:\r\n\r\n[\"WEST\"]\r\nor\r\n{ \"WEST\" }\r\nor\r\n[West]\r\nOther examples:\r\nIn [\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"], the direction \"NORTH\" + \"SOUTH\" is going north and coming back right away.\r\n\r\nThe path becomes [\"EAST\", \"WEST\"], now \"EAST\" and \"WEST\" annihilate each other, therefore, the final result is [] (nil in Clojure).\r\n\r\nIn [\"NORTH\", \"EAST\", \"WEST\", \"SOUTH\", \"WEST\", \"WEST\"], \"NORTH\" and \"SOUTH\" are not directly opposite but they become directly opposite after the reduction of \"EAST\" and \"WEST\" so the whole path is reducible to [\"WEST\", \"WEST\"].\r\n\r\nTask\r\nWrite a function dirReduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).\r\n\r\nThe Haskell version takes a list of directions with data Direction = North | East | West | South.\r\nThe Clojure version returns nil when the path is reduced to nothing.\r\nThe Rust version takes a slice of enum Direction {North, East, West, South}.\r\nSee more examples in \"Sample Tests:\"\r\nNotes\r\nNot all paths can be made simpler. The path [\"NORTH\", \"WEST\", \"SOUTH\", \"EAST\"] is not reducible. \"NORTH\" and \"WEST\", \"WEST\" and \"SOUTH\", \"SOUTH\" and \"EAST\" are not directly opposite of each other and can't become such. Hence the result path is itself : [\"NORTH\", \"WEST\", \"SOUTH\", \"EAST\"].\r\nif you want to translate, please ask before translating.", "is_solved": true, "solution": "def dir_reduc(arr):\r\n    opos = {\"NORTH\": \"SOUTH\", \"SOUTH\": \"NORTH\", \"EAST\": \"WEST\", \"WEST\": \"EAST\"}\r\n    seen = []\r\n    \r\n    for direction in arr:\r\n        if seen and direction == opos[seen[-1]]:\r\n            seen.pop() #seen = seen[:-1]\r\n        else:\r\n            seen.append(direction) # seen += directions\r\n    return seen", "testcase": "(dir_reduc([\"NORTH\", \"SOUTH\", \"SOUTH\", \"EAST\", \"WEST\", \"NORTH\", \"WEST\"]), \"WEST\")\r\n(dir_reduc([\"NORTH\", \"EAST\", \"WEST\", \"SOUTH\", \"WEST\", \"WEST\"]), [\"WEST\", \"WEST\"])\r\n(dir_reduc([\"NORTH\", \"WEST\", \"SOUTH\", \"EAST\"]), [\"NORTH\", \"WEST\", \"SOUTH\", \"EAST\"])\r\n(dir_reduc([]), [])", "tags": [7, 6]}}, {"model": "python_problems.problem", "pk": 6, "fields": {"title": "Valid Palindrome", "slug": "valid-palindrome", "difficulty": 1, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/valid-palindrome/description/", "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\r\n\r\nGiven a string s, return true if it is a palindrome, or false otherwise.\r\n\r\nExample 1:\r\n\r\nInput: s = \"A man, a plan, a canal: Panama\"\r\nOutput: true\r\nExplanation: \"amanaplanacanalpanama\" is a palindrome.", "is_solved": true, "solution": "import string\r\nclass Solution:\r\n    def isPalindrome(self, s: str) -> bool:\r\n        l = 0\r\n        r = len(s) - 1\r\n\r\n        while l < r:\r\n            while s[l] in string.punctuation + \" \" and l < r:\r\n                l += 1\r\n\r\n            while s[r] in string.punctuation + \" \"  and l < r:\r\n                r -= 1\r\n            \r\n            if s[l].lower() != s[r].lower():\r\n                return False\r\n\r\n            l += 1\r\n            r -= 1\r\n        \r\n        return True\r\nSolution().isPalindrome(\"A man, a plan, a canal: Panama\")\r\n\r\n\r\n# replace\r\nimport string\r\nclass Solution:\r\n    def isPalindrome(self, s: str) -> bool:\r\n        for char in string.punctuation + \" \":\r\n            s = s.replace(char, \"\")\r\n        return s.lower() == s[::-1].lower()\r\nSolution().isPalindrome(\"A man, a plan, a canal: Panama\")\r\n\r\n\r\n# regex\r\nimport re\r\nclass Solution:\r\n    def isPalindrome(self, s: str) -> bool:\r\n        s = re.sub(r\"[\\W_]\", \"\", s).lower()\r\n        return s == s[::-1]\r\nSolution().isPalindrome(\"A man, a plan, a canal: Panama\")\r\n\r\n\r\n# comprehension list, isalpha()\r\nclass Solution:\r\n    def isPalindrome(self, s: str) -> bool:\r\n        cleaned_s = [alph.lower() for alph in s if alph.isalpha()]\r\n        return cleaned_s == cleaned_s[::-1]\r\nSolution().isPalindrome(\"A man, a plan, a canal: Panama\")\r\n\r\n\r\n# comprehension list\r\nimport string\r\nclass Solution:\r\n    def isPalindrome(self, s: str) -> bool:\r\n        # filtered_s = list(filter(lambda x: not x in string.punctuation + \" \", s))\r\n        filtered_s = list(alph.lower() for alph in s if not alph in string.punctuation + \" \")\r\n        # return \"\".join(filtered_s).lower() == \"\".join(filtered_s[::-1]).lower()\r\n        return filtered_s == filtered_s[::-1]\r\nSolution().isPalindrome(\"A man, a plan, a canal: Panama\")", "testcase": "(Solution().isPalindrome(\"A man, a plan, a canal: Panama\"), True)", "tags": [6, 4]}}, {"model": "python_problems.problem", "pk": 7, "fields": {"title": "Split a String in Balanced Strings", "slug": "split-a-string-in-balanced-strings", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/split-a-string-in-balanced-strings/description/", "description": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\r\n\r\nGiven a balanced string s, split it into some number of substrings such that:\r\n\r\nEach substring is balanced.\r\nReturn the maximum number of balanced strings you can obtain.\r\n\r\nExample 1:\r\n\r\nInput: s = \"RLRRLLRLRL\"\r\nOutput: 4\r\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.\r\nExample 2:\r\n\r\nInput: s = \"RLRRRLLRLL\"\r\nOutput: 2\r\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\r\nNote that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.\r\nExample 3:\r\n\r\nInput: s = \"LLLLRRRR\"\r\nOutput: 1\r\nExplanation: s can be split into \"LLLLRRRR\".", "is_solved": true, "solution": "class Solution:\r\n    def balancedStringSplit(self, s: str) -> int:\r\n        seen = []\r\n        oppos = {\"L\": \"R\", \"R\": \"L\"}\r\n        counter = 0\r\n\r\n        for direct in s:\r\n            if seen and oppos[direct] == seen[-1]:\r\n                seen.pop()\r\n            else:\r\n                seen.append(direct)\r\n            if not seen:\r\n                counter += 1\r\n\r\n        return counter", "testcase": "(Solution().balancedStringSplit(\"RLRRLLRLRL\"), 4)\r\n(Solution().balancedStringSplit(\"RLRRRLLRLL\"), 2)\r\n(Solution().balancedStringSplit(\"LLLLRRRR\"), 1)", "tags": [11, 10, 6]}}, {"model": "python_problems.problem", "pk": 8, "fields": {"title": "Sum of Pairs", "slug": "sum-of-pairs", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://www.codewars.com/kata/54d81488b981293527000c8f", "description": "Given a list of integers and a single sum value, return the first two values (parse from the left please) in order of appearance that add up to form the sum.\r\n\r\nsum_pairs([11, 3, 7, 5],         10)\r\n#              ^--^      3 + 7 = 10\r\n== [3, 7]\r\n\r\nsum_pairs([4, 3, 2, 3, 4],         6)\r\n#          ^-----^         4 + 2 = 6, indices: 0, 2 *\r\n#             ^-----^      3 + 3 = 6, indices: 1, 3\r\n#                ^-----^   2 + 4 = 6, indices: 2, 4\r\n#  * entire pair is earlier, and therefore is the correct answer\r\n== [4, 2]\r\n\r\nsum_pairs([0, 0, -2, 3], 2)\r\n#  there are no pairs of values that can be added to produce 2.\r\n== None/nil/undefined (Based on the language)\r\n\r\nsum_pairs([10, 5, 2, 3, 7, 5],         10)\r\n#              ^-----------^   5 + 5 = 10, indices: 1, 5\r\n#                    ^--^      3 + 7 = 10, indices: 3, 4 *\r\n#  * entire pair is earlier, and therefore is the correct answer\r\n== [3, 7]\r\nNegative numbers and duplicate numbers can and will appear.\r\n\r\nNOTE: There will also be lists tested of lengths upwards of 10,000,000 elements. Be sure your code doesn't time out.", "is_solved": true, "solution": "def sum_pairs(ints, s):\r\n    seen = set()\r\n\r\n    for number in ints:\r\n        diff = s - number\r\n\r\n        if diff in seen:\r\n            return [diff, number]\r\n        seen.add(number)\r\n\r\n    return None", "testcase": "(sum_pairs([10, 5, 2, 3, 7, 5], 10), [3, 7])\r\n(sum_pairs([1, 4, 8, 7, 3, 15], 8), [1, 7])\r\n(sum_pairs([1, -2, 3, 0, -6, 1], -6), [0, -6])", "tags": [2, 3]}}, {"model": "python_problems.problem", "pk": 10, "fields": {"title": "Unique Paths", "slug": "unique-paths", "difficulty": 2, "time_complexity": 3, "space_complexity": 2, "url": "https://leetcode.com/problems/unique-paths/description/", "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\r\n\r\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\r\n\r\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\r\n\r\nExample 1:\r\n\r\n\r\nInput: m = 3, n = 7\r\nOutput: 28\r\nExample 2:\r\n\r\nInput: m = 3, n = 2\r\nOutput: 3\r\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\r\n1. Right -> Down -> Down\r\n2. Down -> Down -> Right\r\n3. Down -> Right -> Down", "is_solved": true, "solution": "# O(n * m) O(n)\r\nclass Solution():\r\n    def uniquePaths(self, m: int, n: int) -> int:\r\n\r\n        bottom_row = [1] * n\r\n\r\n        for _ in range(m - 1):\r\n            curr_row = [1] * n\r\n        \r\n            for i in range(n - 1)[::-1]:\r\n                curr_row[i] = curr_row[i + 1] + bottom_row[i]\r\n\r\n            bottom_row = curr_row\r\n\r\n        return bottom_row[0]", "testcase": "(Solution().uniquePaths(3, 7), 28)\r\n(Solution().uniquePaths(3, 2), 3)\r\n(Solution().uniquePaths(1, 2), 1)", "tags": [13, 14, 8]}}, {"model": "python_problems.problem", "pk": 11, "fields": {"title": "Contains Duplicate", "slug": "contains-duplicate", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/contains-duplicate/", "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\r\n\r\nExample 1:\r\n\r\nInput: nums = [1, 2, 3, 1]\r\nOutput: true\r\n\r\nExample 2:\r\n\r\nInput: nums = [1, 2, 3, 4]\r\nOutput: false\r\n\r\nExample 3:\r\n\r\nInput: nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\r\nOutput: true", "is_solved": true, "solution": "class Solution:\r\n    def containsDuplicate(self, nums: list[int]) -> bool:\r\n        seen = set()\r\n    \r\n        for num in nums:\r\n            if num in seen:\r\n                return True\r\n            else:\r\n                seen.add(num)\r\n        return False\r\n        \r\n        # alt solution \r\n        # return not (len(set(nums)) == len(nums))\r\n\r\n        # alt solution\r\n        # import numpy as np\r\n        # return len(np.unique(nums)) == len(nums)", "testcase": "(Solution().containsDuplicate([1, 2, 3]), False)\r\n(Solution().containsDuplicate([1, 2, 3, 4]), False)\r\n(Solution().containsDuplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]), True)", "tags": [2, 3, 17]}}, {"model": "python_problems.problem", "pk": 12, "fields": {"title": "Valid Anagram", "slug": "valid-anagram", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/valid-anagram/description/", "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\r\n\r\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\r\n\r\nExample 1:\r\n\r\nInput: s = \"anagram\", t = \"nagaram\"\r\nOutput: true\r\nExample 2:\r\n\r\nInput: s = \"rat\", t = \"car\"\r\nOutput: false", "is_solved": true, "solution": "class Solution:\r\n    def isAnagram(self, s: str, t: str) -> bool:\r\n        return {letter: s.count(letter) for letter in set(s)} == {letter: t.count(letter) for letter in set(t)}\r\n\r\n        # alt solution\r\n        # from collections import Counter\r\n        # return Counter(s) == Counter(t)", "testcase": "(Solution().isAnagram(\"anagram\", \"nagaram\"), True)\r\n(Solution().isAnagram(\"rat\", \"car\"), False)", "tags": [3, 17, 6]}}, {"model": "python_problems.problem", "pk": 13, "fields": {"title": "Group Anagrams", "slug": "group-anagrams", "difficulty": 2, "time_complexity": 3, "space_complexity": 3, "url": "https://leetcode.com/problems/group-anagrams/description/", "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\r\n\r\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\r\n\r\nExample 1:\r\n\r\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\r\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]", "is_solved": true, "solution": "# O(m*n), O(m*n)\r\nclass Solution:\r\n    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:\r\n        grouped_anagrams = dict()\r\n        # from collections import defaultdict\r\n        # grouped_anagrams = defaultdict(list)\r\n\r\n        for word in strs:\r\n            key = [0] * 26\r\n\r\n            for letter in word:\r\n                key[ord(letter) - ord(\"a\")] += 1\r\n\r\n            key = tuple(key)\r\n            if not key in grouped_anagrams:\r\n                grouped_anagrams[key] = []\r\n            grouped_anagrams[key].append(word)\r\n            # grouped_anagrams[key].append(word)\r\n\r\n        return grouped_anagrams.values()\r\n\r\n\r\n# alt solutions # 83, 19 O(m*n*logn) m - list cout, n - avg word len\r\nclass Solution:\r\n    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:\r\n        grouped_anagrams = {}\r\n        \r\n        for word in strs:\r\n            key = \"\".join(sorted(word))\r\n            if key in grouped_anagrams:\r\n                grouped_anagrams[key].append(word)\r\n            else:\r\n                grouped_anagrams[key] = [word]\r\n        return list(grouped_anagrams.values())", "testcase": "(Solution().groupAnagrams([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]), [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']])\r\n(Solution().groupAnagrams([\"\"]), [[\"\"]])\r\n(Solution().groupAnagrams([\"a\"]), [[\"a\"]])\r\n(Solution().groupAnagrams([\"tin\",\"ram\",\"zip\",\"cry\",\"pus\",\"jon\",\"zip\",\"pyx\"]), [['tin'], ['ram'], ['zip', 'zip'], ['cry'], ['pus'], ['jon'], ['pyx']])", "tags": [2, 3, 17, 6]}}, {"model": "python_problems.problem", "pk": 14, "fields": {"title": "Top K Frequent Elements", "slug": "top-k-frequent-elements", "difficulty": 2, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/top-k-frequent-elements/description/", "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\r\n\r\nExample 1:\r\n\r\nInput: nums = [1,1,1,2,2,3], k = 2\r\nOutput: [1,2]\r\nExample 2:\r\n\r\nInput: nums = [1], k = 1\r\nOutput: [1]", "is_solved": true, "solution": "# O(n), O(n)\r\nclass Solution:\r\n    def topKFrequent(self, nums: list[int], k: int) -> list[int]:\r\n        # count = {num: nums.count(num) for num in set(nums)} # {1: 3, 2: 2, 3: 1}  # O(n2)\r\n        count = {}\r\n        freq_group = [[] for _ in  range(len(nums) + 1)]\r\n\r\n        for num in nums:\r\n            count[num] = count.get(num, 0) + 1\r\n\r\n        for key, val in count.items():\r\n            freq_group[val].append(key)\r\n        # [[], [3], [2], [1], [], [], []] # bucket\r\n\r\n        sol = []\r\n        for freq_list in freq_group[::-1]:\r\n            if freq_list:\r\n                for freq_elem in freq_list:\r\n                    sol.append(freq_elem)\r\n                    if len(sol) == k:\r\n                        return sol\r\n\r\n        return None", "testcase": "(Solution().topKFrequent([1, 1, 1, 2, 2, 3], 2), [1, 2])\r\n(Solution().topKFrequent([1], 1), [1])", "tags": [2, 20, 11, 18, 3, 19, 21, 17]}}, {"model": "python_problems.problem", "pk": 15, "fields": {"title": "Longest Consecutive Sequence", "slug": "longest-consecutive-sequence", "difficulty": 2, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/longest-consecutive-sequence/description/", "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\r\n\r\nYou must write an algorithm that runs in O(n) time.\r\n\r\nExample 1:\r\n\r\nInput: nums = [100,4,200,1,3,2]\r\nOutput: 4\r\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\r\nExample 2:\r\n\r\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\r\nOutput: 9", "is_solved": true, "solution": "# O(n), O(n)\r\nclass Solution:\r\n    def longestConsecutive(self, nums: list[int]) -> int:\r\n        nums_set = set(nums)\r\n        longest_concec = 0\r\n\r\n        for num in nums_set:\r\n            if not num - 1 in nums_set:\r\n                curr_len = 1\r\n                \r\n                while num + curr_len in nums_set:\r\n                    curr_len += 1\r\n                longest_concec = max(longest_concec, curr_len)\r\n\r\n        return longest_concec", "testcase": "(Solution().longestConsecutive([100, 4, 200, 1, 3, 2]), 4)\r\n(Solution().longestConsecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]), 9)", "tags": [2, 3, 22]}}, {"model": "python_problems.problem", "pk": 16, "fields": {"title": "3Sum", "slug": "3sum", "difficulty": 2, "time_complexity": 3, "space_complexity": 2, "url": "https://leetcode.com/problems/3sum/description/", "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\r\n\r\nNotice that the solution set must not contain duplicate triplets.\r\n\r\nExample 1:\r\n\r\nInput: nums = [-1,0,1,2,-1,-4]\r\nOutput: [[-1,-1,2],[-1,0,1]]\r\nExplanation: \r\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\r\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\r\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\r\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\r\nNotice that the order of the output and the order of the triplets does not matter.\r\n\r\nExample 2:\r\n\r\nInput: nums = [0,1,1]\r\nOutput: []\r\nExplanation: The only possible triplet does not sum up to 0.\r\n\r\nExample 3:\r\n\r\nInput: nums = [0,0,0]\r\nOutput: [[0,0,0]]\r\nExplanation: The only possible triplet sums up to 0.", "is_solved": true, "solution": "class Solution:\r\n    def threeSum(self, nums: list[int]) -> list[list[int]]:\r\n        seen = []\r\n        nums.sort()\r\n\r\n        for ind, num in enumerate(nums[:-2]):\r\n            # Skip positive nums\r\n            if num > 0:\r\n                break\r\n            \r\n            # Skip same values\r\n            if ind and num == nums[ind-1]:\r\n                continue\r\n\r\n            l = ind + 1\r\n            r = len(nums) - 1\r\n\r\n            while l < r:\r\n                triplet = num + nums[l] + nums[r]\r\n                if triplet > 0:\r\n                    r -= 1\r\n                elif triplet < 0:\r\n                    l += 1\r\n                else:\r\n                    seen.append([num, nums[l], nums[r]])\r\n                    # r -= 1\r\n                    l += 1\r\n                    while nums[l] == nums[l-1] and l < r:\r\n                        l += 1                \r\n        return seen", "testcase": "(Solution().threeSum([-1, 0, 1, 2, -1, -4]), [[-1, -1, 2], [-1, 0, 1]])\r\n(Solution().threeSum([-1, 1, 1]), [])\r\n(Solution().threeSum([0, 0, 0]), [[0, 0, 0]])", "tags": [2, 17, 4]}}, {"model": "python_problems.problem", "pk": 17, "fields": {"title": "Container With Most Water", "slug": "container-with-most-water", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/container-with-most-water/", "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\r\n\r\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\r\n\r\nReturn the maximum amount of water a container can store.\r\n\r\nNotice that you may not slant the container.\r\n\r\nExample 1:\r\n\r\nInput: height = [1,8,6,2,5,4,8,3,7]\r\nOutput: 49\r\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\r\nExample 2:\r\n\r\nInput: height = [1,1]\r\nOutput: 1", "is_solved": true, "solution": "# O(n), O(1)\r\nclass Solution:\r\n    def maxArea(self, height: list[int]) -> int:\r\n        l = 0\r\n        r = len(height) - 1\r\n        max_pool_size = 0\r\n\r\n        while l < r:\r\n            pool_size = min(height[l], height[r]) * (r - l)\r\n            if pool_size > max_pool_size:\r\n                max_pool_size = pool_size\r\n\r\n            if height[l] < height[r]:\r\n                l += 1\r\n            else:\r\n                r -= 1\r\n\r\n        return max_pool_size\r\n\r\n\r\n\r\n# O(n2)\r\nclass Solution:\r\n    def maxArea(self, height: list[int]) -> int:\r\n        max_pool_size = 0\r\n\r\n        for i, h1 in enumerate(height[:-1]):\r\n            for j, h2 in enumerate(height[i+1:]):\r\n                pool_size = min(h1, h2) * (j + 1)\r\n                if  pool_size > max_pool_size:\r\n                    max_pool_size = pool_size\r\n\r\n        return max_pool_size", "testcase": "(Solution().maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]), 49)\r\n(Solution().maxArea([1, 1]), 1)", "tags": [2, 10, 4]}}, {"model": "python_problems.problem", "pk": 18, "fields": {"title": "Count Pairs Whose Sum is Less than Target", "slug": "count-pairs-whose-sum-is-less-than-target", "difficulty": 1, "time_complexity": 5, "space_complexity": 1, "url": "https://leetcode.com/problems/count-pairs-whose-sum-is-less-than-target/", "description": "Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.\r\n \r\nExample 1:\r\n\r\nInput: nums = [-1,1,2,3,1], target = 2\r\nOutput: 3\r\nExplanation: There are 3 pairs of indices that satisfy the conditions in the statement:\r\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\r\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \r\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\r\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\r\n\r\nExample 2:\r\n\r\nInput: nums = [-6,2,5,-2,-7,-1,3], target = -2\r\nOutput: 10\r\nExplanation: There are 10 pairs of indices that satisfy the conditions in the statement:\r\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\r\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\r\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\r\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\r\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\r\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\r\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\r\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\r\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\r\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target", "is_solved": true, "solution": "# O(nlogn), O(1)\r\nclass Solution:\r\n    def countPairs(self, nums: list[int], target: int) -> int:\r\n        counter = 0\r\n        nums.sort()\r\n        l = 0\r\n        r = len(nums) -1\r\n\r\n        while l < r:\r\n            if nums[l] + nums[r] < target:\r\n                # [-1, 1, 1, 2, 3] (r - l) because left = -1, rigth = 2, so add every combination (1, 1, 2) before incresing the left pointer\r\n                counter += r - l\r\n                l += 1\r\n            else:\r\n                r -= 1\r\n\r\n        return counter\r\n\r\n\r\n# O(n2), O(1)\r\nclass Solution:\r\n    def countPairs(self, nums: list[int], target: int) -> int:\r\n        counter = 0\r\n\r\n        for i_ind, i in enumerate(nums):\r\n            for j_ind, j in enumerate(nums):\r\n                if i_ind < j_ind and i + j < target:\r\n                    counter += 1\r\n        \r\n        return counter", "testcase": "(Solution().countPairs([-1, 1, 2, 3, 1], 2), 3)\r\n(Solution().countPairs([-6, 2, 5, -2, -7, -1, 3], -2), 10)", "tags": [2, 5, 17, 4]}}, {"model": "python_problems.problem", "pk": 19, "fields": {"title": "Reverse Prefix of Word", "slug": "reverse-prefix-of-word", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/reverse-prefix-of-word/", "description": "Given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). If the character ch does not exist in word, do nothing.\r\n\r\nFor example, if word = \"abcdefd\" and ch = \"d\", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). The resulting string will be \"dcbaefd\".\r\nReturn the resulting string.\r\n\r\nExample 1:\r\n\r\nInput: word = \"abcdefd\", ch = \"d\"\r\nOutput: \"dcbaefd\"\r\nExplanation: The first occurrence of \"d\" is at index 3. \r\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\".\r\nExample 2:\r\n\r\nInput: word = \"xyxzxe\", ch = \"z\"\r\nOutput: \"zxyxxe\"\r\nExplanation: The first and only occurrence of \"z\" is at index 3.\r\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\".\r\nExample 3:\r\n\r\nInput: word = \"abcd\", ch = \"z\"\r\nOutput: \"abcd\"\r\nExplanation: \"z\" does not exist in word.\r\nYou should not do any reverse operation, the resulting string is \"abcd\".", "is_solved": true, "solution": "class Solution:\r\n    def reversePrefix(self, word: str, ch: str) -> str:\r\n        seen = \"\"\r\n\r\n        for letter in word:\r\n            if letter != ch:\r\n                seen = letter + seen\r\n            else:\r\n                seen = letter + seen\r\n                return seen + word[len(seen):]\r\n        \r\n        return word\r\ncd\")\r\n\r\n\r\nclass Solution:\r\n    def reversePrefix(self, word: str, ch: str) -> str:\r\n        letter_pos = word.find(ch)\r\n\r\n        if letter_pos == -1:\r\n            return word\r\n        else:\r\n            return word[:letter_pos + 1][::-1] + word[letter_pos + 1:]", "testcase": "(Solution().reversePrefix(\"abcdefd\", \"d\"), \"dcbaefd\")\r\n(Solution().reversePrefix(\"xyxzxe\", \"z\"), \"zxyxxe\")\r\n(Solution().reversePrefix(\"abcd\", \"z\"), \"ab", "tags": [6, 4]}}, {"model": "python_problems.problem", "pk": 20, "fields": {"title": "Find First Palindromic String in the Array", "slug": "find-first-palindromic-string-in-the-array", "difficulty": 1, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/find-first-palindromic-string-in-the-array/", "description": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\r\n\r\nA string is palindromic if it reads the same forward and backward.\r\n\r\nExample 1:\r\n\r\nInput: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\r\nOutput: \"ada\"\r\nExplanation: The first string that is palindromic is \"ada\".\r\nNote that \"racecar\" is also palindromic, but it is not the first.\r\nExample 2:\r\n\r\nInput: words = [\"notapalindrome\",\"racecar\"]\r\nOutput: \"racecar\"\r\nExplanation: The first and only string that is palindromic is \"racecar\".\r\nExample 3:\r\n\r\nInput: words = [\"def\",\"ghi\"]\r\nOutput: \"\"\r\nExplanation: There are no palindromic strings, so the empty string is returned.", "is_solved": true, "solution": "class Solution:\r\n    def firstPalindrome(self, words: list[str]) -> str:\r\n        for word in words:\r\n            l = 0\r\n            r = len(word) - 1\r\n            return_word = True\r\n\r\n            while l < r:\r\n                if word[l] != word[r]:\r\n                    return_word = False\r\n                    break\r\n                else:\r\n                    l += 1\r\n                    r -= 1\r\n            \r\n            if return_word:\r\n                return word\r\n\r\n            # if word == word[::-1]:\r\n            #     return word\r\n        \r\n        return \"\"", "testcase": "(Solution().firstPalindrome([\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]), \"ada\")\r\n(Solution().firstPalindrome([\"notapalindrome\",\"racecar\"]), \"racecar\")\r\n(Solution().firstPalindrome([\"def\",\"ghi\"]), \"\")", "tags": [2, 6, 4]}}, {"model": "python_problems.problem", "pk": 21, "fields": {"title": "Number of Arithmetic Triplets", "slug": "number-of-arithmetic-triplets", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/number-of-arithmetic-triplets/", "description": "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\r\n\r\ni < j < k,\r\nnums[j] - nums[i] == diff, and\r\nnums[k] - nums[j] == diff.\r\nReturn the number of unique arithmetic triplets.\r\n\r\nExample 1:\r\n\r\nInput: nums = [0,1,4,6,7,10], diff = 3\r\nOutput: 2\r\nExplanation:\r\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\r\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \r\n\r\nExample 2:\r\n\r\nInput: nums = [4,5,6,7,8,9], diff = 2\r\nOutput: 2\r\nExplanation:\r\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\r\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.", "is_solved": true, "solution": "class Solution:\r\n    def arithmeticTriplets(self, nums: list[int], diff: int) -> int:\r\n        seen = set()\r\n        counter = 0\r\n\r\n        for num in nums:\r\n            seen.add(num)\r\n            if num - diff in seen and num - 2*diff in seen:\r\n                counter += 1\r\n\r\n        return counter", "testcase": "(Solution().arithmeticTriplets([0, 1, 4, 6, 7, 10], 3), 2)\r\n(Solution().arithmeticTriplets([4, 5, 6, 7, 8, 9], 2), 2)", "tags": [2, 23, 3, 4]}}, {"model": "python_problems.problem", "pk": 22, "fields": {"title": "Reverse Words in a String III", "slug": "reverse-words-in-a-string-iii", "difficulty": 1, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/reverse-words-in-a-string-iii/", "description": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\r\n\r\nExample 1:\r\n\r\nInput: s = \"Let's take LeetCode contest\"\r\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\r\nExample 2:\r\n\r\nInput: s = \"Mr Ding\"\r\nOutput: \"rM gniD\"", "is_solved": true, "solution": "class Solution:\r\n    def reverseWords(self, s: str) -> str:\r\n        return \" \".join(word[::-1] for word in s.split())\r\n\r\n\r\nclass Solution:\r\n    def reverseWords(self, s: str) -> str:\r\n        rev_str = \"\"\r\n\r\n        for word in s.split(\" \"):\r\n            rev_str = rev_str + \"\".join(word[::-1]) + \" \"\r\n\r\n        return rev_str[:-1]\r\n\r\n\r\nclass Solution:\r\n    def reverseWords(self, s: str) -> str:\r\n        rev_word = \"\"\r\n        rev_str = \"\"\r\n\r\n        for letter in s:\r\n            if letter != \" \":\r\n                rev_word = letter + rev_word\r\n            else:\r\n                rev_str += rev_word + \" \"\r\n                rev_word = \"\"\r\n        return rev_str + rev_word", "testcase": "(Solution().reverseWords(\"Let's take LeetCode contest\"), \"s'teL ekat edoCteeL tsetnoc\")\r\n(Solution().reverseWords(\"Mr Ding\"), \"rM gniD\")\r\n(Solution().reverseWords(\"hehhhhhhe\"), \"ehhhhhheh\")", "tags": [6, 4]}}, {"model": "python_problems.problem", "pk": 23, "fields": {"title": "Best Time to Buy and Sell Stock", "slug": "best-time-to-buy-and-sell-stock", "difficulty": 1, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/", "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\r\n\r\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\r\n\r\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\r\n\r\nExample 1:\r\n\r\nInput: prices = [7,1,5,3,6,4]\r\nOutput: 5\r\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\r\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\r\nExample 2:\r\n\r\nInput: prices = [7,6,4,3,1]\r\nOutput: 0\r\nExplanation: In this case, no transactions are done and the max profit = 0.", "is_solved": true, "solution": "class Solution:\r\n    def maxProfit(self, prices: list[int]):\r\n        l = 0\r\n        r = 1\r\n        profit = 0\r\n\r\n        while r < len(prices):\r\n            \r\n            # if price is lower - buy\r\n            if prices[r] < prices[l]:\r\n                l = r\r\n            \r\n            # if price is higher - calculate revenue\r\n            else:\r\n                profit = max(profit, prices[r] - prices[l])\r\n            r += 1\r\n        \r\n        return profit", "testcase": "(Solution().maxProfit([7, 1, 5, 3, 6, 4]), 5)\r\n(Solution().maxProfit([7, 6, 4, 3, 1]), 0)\r\n(Solution().maxProfit([2, 4, 1]), 2)\r\n(Solution().maxProfit([2, 1, 2, 1, 0, 1, 2]), 2)\r\n(Solution().maxProfit([1, 2]), 1)", "tags": [2, 14, 24]}}, {"model": "python_problems.problem", "pk": 24, "fields": {"title": "Longest Substring Without Repeating Characters", "slug": "longest-substring-without-repeating-characters", "difficulty": 2, "time_complexity": 2, "space_complexity": 2, "url": "https://leetcode.com/problems/longest-substring-without-repeating-characters/", "description": "Given a string s, find the length of the longest \r\nsubstring without repeating characters.\r\n\r\nExample 1:\r\n\r\nInput: s = \"abcabcbb\"\r\nOutput: 3\r\nExplanation: The answer is \"abc\", with the length of 3.\r\nExample 2:\r\n\r\nInput: s = \"bbbbb\"\r\nOutput: 1\r\nExplanation: The answer is \"b\", with the length of 1.\r\nExample 3:\r\n\r\nInput: s = \"pwwkew\"\r\nOutput: 3", "is_solved": true, "solution": "class Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        slider = \"\"\r\n        max_len = 0\r\n\r\n        for letter in s:\r\n            if letter in slider:\r\n                duplicate_ind = slider.index(letter)\r\n                slider = slider[duplicate_ind + 1:]\r\n            \r\n            slider += letter\r\n            max_len = max(max_len, len(slider))\r\n\r\n        return max_len\r\n\r\n\r\nclass Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        unique_elements = set()\r\n        l = 0 # start slider\r\n        max_len = 0\r\n\r\n        for r in range(len(s)): # end slider\r\n            while s[r] in unique_elements:\r\n                unique_elements.discard(s[l])\r\n                l += 1\r\n\r\n            unique_elements.add(s[r])\r\n            max_len = max(max_len, len(unique_elements))\r\n\r\n        return max_len", "testcase": "(Solution().lengthOfLongestSubstring(\"abcabcbb\"), 3)\r\n(Solution().lengthOfLongestSubstring(\"bbbbb\"), 1)\r\n(Solution().lengthOfLongestSubstring(\"pwwkew\"), 3)\r\n(Solution().lengthOfLongestSubstring(\"aabaab!bb\"), 3)\r\n(Solution().lengthOfLongestSubstring(\"aab\"), 2)", "tags": [3, 24, 6]}}, {"model": "python_problems.problem", "pk": 25, "fields": {"title": "Substrings of Size Three with Distinct Characters", "slug": "substrings-of-size-three-with-distinct-characters", "difficulty": 1, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/", "description": "A string is good if there are no repeated characters.\r\n\r\nGiven a string s​​​​​, return the number of good substrings of length three in s​​​​​​.\r\n\r\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\r\n\r\nA substring is a contiguous sequence of characters in a string.\r\n\r\nExample 1:\r\n\r\nInput: s = \"xyzzaz\"\r\nOutput: 1\r\nExplanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \r\nThe only good substring of length 3 is \"xyz\".\r\nExample 2:\r\n\r\nInput: s = \"aababcabc\"\r\nOutput: 4\r\nExplanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\r\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".", "is_solved": true, "solution": "class Solution:\r\n    def countGoodSubstrings(self, s: str) -> int:\r\n        counter = 0\r\n\r\n        for i in range(len(s) - 2):\r\n            if len(set(s[i: i + 3])) == 3:\r\n                counter += 1\r\n\r\n        return counter", "testcase": "(Solution().countGoodSubstrings(\"xyzzaz\"), 1)\r\n(Solution().countGoodSubstrings(\"aababcabc\"), 4)", "tags": [11, 3, 24, 6]}}, {"model": "python_problems.problem", "pk": 26, "fields": {"title": "Find Minimum in Rotated Sorted Array", "slug": "find-minimum-in-rotated-sorted-array", "difficulty": 2, "time_complexity": 4, "space_complexity": 1, "url": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/", "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\r\n\r\n[4,5,6,7,0,1,2] if it was rotated 4 times.\r\n[0,1,2,4,5,6,7] if it was rotated 7 times.\r\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\r\n\r\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\r\n\r\nYou must write an algorithm that runs in O(log n) time.\r\n\r\n \r\n\r\nExample 1:\r\n\r\nInput: nums = [3,4,5,1,2]\r\nOutput: 1\r\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\r\nExample 2:\r\n\r\nInput: nums = [4,5,6,7,0,1,2]\r\nOutput: 0\r\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\r\nExample 3:\r\n\r\nInput: nums = [11,13,15,17]\r\nOutput: 11\r\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times.", "is_solved": true, "solution": "class Solution:\r\n    def findMin(self, nums: list[int]) -> int:\r\n        l = 0\r\n        r = len(nums) - 1\r\n        \r\n        while True:\r\n            if r - l < 2:\r\n                return min(nums[l], nums[r])\r\n\r\n            mid = (l + r)//2\r\n            \r\n            if nums[mid] < nums[r]:\r\n                r = mid\r\n            else:\r\n                l = mid\r\n\r\n        return None\r\n\r\n\r\nclass Solution:\r\n    def findMin(self, nums: list[int]) -> int:\r\n        start, stop = 0, len(nums) - 1\r\n        min_num = float(\"inf\")\r\n\r\n        while start <= stop:\r\n            mid = (start + stop) // 2\r\n            min_num = min(min_num, nums[mid])\r\n\r\n            if min_num > nums[stop]:\r\n                start = mid + 1\r\n            else:\r\n                stop = mid - 1\r\n\r\n        return min_num", "testcase": "(Solution().findMin([1, 2, 3, 4]), 1)\r\n(Solution().findMin([4, 1, 2, 3]), 1)\r\n(Solution().findMin([2, 3, 4, 1]), 1)\r\n(Solution().findMin([3, 4, 1, 2]), 1)\r\n(Solution().findMin([4, 5, 1, 2, 3]), 1)\r\n(Solution().findMin([5, 1, 2, 3, 4]), 1)\r\n(Solution().findMin([1, 2, 3, 4, 5]), 1)\r\n(Solution().findMin([2, 3, 4, 5, 1]), 1)\r\n(Solution().findMin([3, 4, 5, 1, 2]), 1)\r\n(Solution().findMin([4, 5, 6, 7, 0, 1, 2]), 0)\r\n(Solution().findMin([11, 13, 15, 17]), 11)\r\n(Solution().findMin([1]), 1)\r\n(Solution().findMin([3, 1, 2]), 1)", "tags": [2, 5]}}, {"model": "python_problems.problem", "pk": 27, "fields": {"title": "Longest Password", "slug": "longest-password", "difficulty": 1, "time_complexity": 2, "space_complexity": 1, "url": "https://app.codility.com/programmers/trainings/1/longest_password/", "description": "You would like to set a password for a bank account. However, there are three restrictions on the format of the password:\r\n\r\nit has to contain only alphanumerical characters (a−z, A−Z, 0−9);\r\nthere should be an even number of letters;\r\nthere should be an odd number of digits.\r\nYou are given a string S consisting of N characters. String S can be divided into words by splitting it at, and removing, the spaces. The goal is to choose the longest word that is a valid password. You can assume that if there are K spaces in string S then there are exactly K + 1 words.\r\n\r\nFor example, given \"test 5 a0A pass007 ?xy1\", there are five words and three of them are valid passwords: \"5\", \"a0A\" and \"pass007\". Thus the longest password is \"pass007\" and its length is 7. Note that neither \"test\" nor \"?xy1\" is a valid password, because \"?\" is not an alphanumerical character and \"test\" contains an even number of digits (zero).\r\n\r\nWrite a function:\r\n\r\ndef solution(S)\r\n\r\nthat, given a non-empty string S consisting of N characters, returns the length of the longest word from the string that is a valid password. If there is no such word, your function should return −1.\r\n\r\nFor example, given S = \"test 5 a0A pass007 ?xy1\", your function should return 7, as explained above.", "is_solved": true, "solution": "def is_even_letters(word):\r\n    word_len = len([letter for letter in word if letter.isalpha()])\r\n    return not word_len % 2\r\n\r\n\r\ndef is_odd_digits(word):\r\n    word_len = len([digit for digit in word if digit.isdigit()])\r\n    return bool(word_len % 2)\r\n\r\n\r\ndef solution(S):\r\n    if not S:\r\n        return -1\r\n    sol = -1\r\n    for word in S.split():\r\n        if word.isalnum() and is_even_letters(word) and is_odd_digits(word):\r\n            sol = max(sol, len(word))\r\n    return sol", "testcase": "(solution(\"test 5 a0A pass007 ?xy1\"), 7)", "tags": [6]}}, {"model": "python_problems.problem", "pk": 28, "fields": {"title": "Flood Depth", "slug": "flood-depth", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://app.codility.com/programmers/trainings/1/flood_depth/", "description": "You are helping a geologist friend investigate an area with mountain lakes. A recent heavy rainfall has flooded these lakes and their water levels have reached the highest possible point. Your friend is interested to know the maximum depth in the deepest part of these lakes.\r\n\r\nWe simplify the problem in 2-D dimensions. The whole landscape can be divided into small blocks and described by an array A of length N. Each element of A is the altitude of the rock floor of a block (i.e. the height of this block when there is no water at all). After the rainfall, all the low-lying areas (i.e. blocks that have higher blocks on both sides) are holding as much water as possible. You would like to know the maximum depth of water after this entire area is flooded. You can assume that the altitude outside this area is zero and the outside area can accommodate infinite amount of water.\r\n\r\nFor example, consider array A such that:\r\n\r\n    A[0] = 1\r\n    A[1] = 3\r\n    A[2] = 2\r\n    A[3] = 1\r\n    A[4] = 2\r\n    A[5] = 1\r\n    A[6] = 5\r\n    A[7] = 3\r\n    A[8] = 3\r\n    A[9] = 4\r\n    A[10] = 2\r\nThe following picture illustrates the landscape after it has flooded:\r\n\r\n# ____\r\n#   |    _____\r\n#   |____|   |\r\n# ____________|\r\n# flood_depth([3, 1, 2])\r\n\r\nThe gray area is the rock floor described by the array A above and the blue area with dashed lines represents the water filling the low-lying areas with maximum possible volume. Thus, blocks 3 and 5 have a water depth of 2 while blocks 2, 4, 7 and 8 have a water depth of 1. Therefore, the maximum water depth of this area is 2.\r\n\r\nWrite a function:\r\n\r\nclass Solution { public int solution(int[] A); }\r\n\r\nthat, given a non-empty array A consisting of N integers, returns the maximum depth of water.\r\n\r\nGiven array A shown above, the function should return 2, as explained above.\r\n\r\nFor the following array:\r\n\r\n    A[0] = 5\r\n    A[1] = 8\r\nthe function should return 0, because this landscape cannot hold any water.", "is_solved": true, "solution": "def flood_depth(land):\r\n    l = 0\r\n    r = len(land) - 1\r\n    flood_depth = 0\r\n    # flood_sum = 0\r\n    max_land_l = 0\r\n    max_land_r = 0\r\n\r\n    while l < r:\r\n        if land[l] < land[r]:\r\n            max_land_l = max(max_land_l, land[l])\r\n            flood_depth = max(flood_depth, max_land_l - land[l])\r\n            # flood_depth = max_land_l - land[l]\r\n            # flood_sum += flood_depth\r\n            l += 1\r\n        else:\r\n            max_land_r = max(max_land_r, land[r])\r\n            flood_depth = max(flood_depth, max_land_r - land[r])\r\n            # flood_depth = max_land_r - land[r]\r\n            # flood_sum += flood_depth\r\n            r -= 1\r\n\r\n    return flood_depth", "testcase": "(flood_depth([1, 3, 2, 1, 2, 1, 5, 3, 3, 4, 2]), 2)\r\n(flood_depth([5, 8]), 0)\r\n(flood_depth([3, 1, 2]), 1)\r\n(flood_depth([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]), 2)", "tags": [2, 14, 25, 7, 4]}}, {"model": "python_problems.problem", "pk": 29, "fields": {"title": "Trapping Rain Water", "slug": "trapping-rain-water", "difficulty": 3, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/trapping-rain-water/", "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\r\n\r\nExample 1:\r\n\r\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\r\nOutput: 6\r\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\r\nExample 2:\r\n\r\nInput: height = [4,2,0,3,2,5]\r\nOutput: 9\r\n\r\n# ____\r\n#   |    _____\r\n#   |____|   |\r\n# ____________|\r\n# (3, 1, 2)", "is_solved": true, "solution": "class Solution:\r\n    def trap(self, land: list[int]) -> int:\r\n        l = 0\r\n        r = len(land) - 1\r\n        flood_depth = 0\r\n        flood_sum = 0\r\n        max_land_l = 0\r\n        max_land_r = 0\r\n\r\n        while l < r:\r\n            if land[l] < land[r]:\r\n                max_land_l = max(max_land_l, land[l])\r\n                # flood_depth = max(flood_depth, max_land_l - land[l])\r\n                flood_depth = max_land_l - land[l]\r\n                flood_sum += flood_depth\r\n                l += 1\r\n            else:\r\n                max_land_r = max(max_land_r, land[r])\r\n                # flood_depth = max(flood_depth, max_land_r - land[r])\r\n                flood_depth = max_land_r - land[r]\r\n                flood_sum += flood_depth\r\n                r -= 1\r\n\r\n        return flood_sum", "testcase": "(Solution().trap([1, 3, 2, 1, 2, 1, 5, 3, 3, 4, 2]), 8)\r\n(Solution().trap([5, 8]), 0)\r\n(Solution().trap([3, 1, 2]), 1)\r\n(Solution().trap([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]), 6)\r\n(Solution().trap([4, 2, 0, 3, 2, 5]), 9)", "tags": [2, 14, 25, 7, 4]}}, {"model": "python_problems.problem", "pk": 30, "fields": {"title": "Climbing Stairs", "slug": "climbing-stairs", "difficulty": 1, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/climbing-stairs/", "description": "You are climbing a staircase. It takes n steps to reach the top.\r\n\r\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\r\n\r\nExample 1:\r\n\r\nInput: n = 2\r\nOutput: 2\r\nExplanation: There are two ways to climb to the top.\r\n1. 1 step + 1 step\r\n2. 2 steps\r\nExample 2:\r\n\r\nInput: n = 3\r\nOutput: 3\r\nExplanation: There are three ways to climb to the top.\r\n1. 1 step + 1 step + 1 step\r\n2. 1 step + 2 steps\r\n3. 2 steps + 1 step", "is_solved": true, "solution": "# Fibonnacci problem\r\n\r\nclass Solution:\r\n    def climbStairs(self, n: int) -> int:\r\n        a = 1\r\n        b = 1\r\n\r\n        for _ in range(n):\r\n            a, b = b, a + b\r\n            # print(a, b)\r\n\r\n        return a", "testcase": "(Solution().climbStairs(2), 2)\r\n(Solution().climbStairs(3), 3)\r\n(Solution().climbStairs(4), 5)", "tags": [14, 8, 26]}}, {"model": "python_problems.problem", "pk": 31, "fields": {"title": "House Robber", "slug": "house-robber", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/house-robber/", "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\r\n\r\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\r\n\r\nExample 1:\r\n\r\nInput: nums = [1,2,3,1]\r\nOutput: 4\r\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\r\nTotal amount you can rob = 1 + 3 = 4.\r\nExample 2:\r\n\r\nInput: nums = [2,7,9,3,1]\r\nOutput: 12\r\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\r\nTotal amount you can rob = 2 + 9 + 1 = 12.", "is_solved": true, "solution": "# O(n), O(1)\r\nclass Solution:\r\n    def rob(self, nums: list[int]):\r\n        house_1 = 0\r\n        house_2 = 0\r\n\r\n        for house_3 in nums:\r\n            temp = max(house_1 + house_3, house_2)\r\n            house_1 = house_2\r\n            house_2 = temp\r\n\r\n        return house_2\r\n\r\n\r\n# O(n), O(n)\r\nclass Solution:\r\n    def rob(self, nums: list[int]):\r\n        dp = [0] * len(nums)\r\n        dp[0] = nums[0]\r\n        dp[1] = max(nums[0], nums[1])\r\n\r\n        for ind in range(2, len(nums)):\r\n            dp[ind] = max(dp[ind - 2] + nums[ind], dp[ind - 1])\r\n\r\n        return dp[-1]", "testcase": "(Solution().rob([1, 2, 3, 1]), 4)\r\n(Solution().rob([2, 7, 9, 3, 1]), 12)\r\n(Solution().rob([2, 100, 9, 3, 100]), 200)", "tags": [2, 14]}}, {"model": "python_problems.problem", "pk": 32, "fields": {"title": "House Robber II", "slug": "house-robber-ii", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/house-robber-ii/", "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\r\n\r\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\r\n\r\nExample 1:\r\n\r\nInput: nums = [2,3,2]\r\nOutput: 3\r\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\r\nExample 2:\r\n\r\nInput: nums = [1,2,3,1]\r\nOutput: 4\r\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\r\nTotal amount you can rob = 1 + 3 = 4.\r\nExample 3:\r\n\r\nInput: nums = [1,2,3]\r\nOutput: 3", "is_solved": true, "solution": "class Solution:\r\n    def rob(self, nums: list[int]):\r\n        house_1 = 0\r\n        house_2 = 0\r\n\r\n        for house_3 in nums:\r\n            temp = max(house_1 + house_3, house_2)\r\n            house_1 = house_2\r\n            house_2 = temp\r\n\r\n        return house_2\r\n    \r\n    def rob_list(self, nums: list[int]) -> int:\r\n        return max(self.rob(nums[:-1]), self.rob(nums[1:]), nums[0])(Solution().rob([2, 3, 2]), 3)", "testcase": "(Solution().rob_list([2, 3, 2]), 3)\r\n(Solution().rob_list([1, 2, 3, 1]), 4)\r\n(Solution().rob_list([1, 2, 3]), 3)\r\n(Solution().rob_list([1]), 1)", "tags": [2, 14]}}, {"model": "python_problems.problem", "pk": 33, "fields": {"title": "Longest Palindromic Substring", "slug": "longest-palindromic-substring", "difficulty": 2, "time_complexity": 3, "space_complexity": 1, "url": "https://leetcode.com/problems/longest-palindromic-substring/", "description": "Given a string s, return the longest \r\npalindromic \r\nsubstring\r\n in s.\r\n\r\nExample 1:\r\n\r\nInput: s = \"babad\"\r\nOutput: \"bab\"\r\nExplanation: \"aba\" is also a valid answer.\r\nExample 2:\r\n\r\nInput: s = \"cbbd\"\r\nOutput: \"bb\"", "is_solved": true, "solution": "class Solution:\r\n    def longestPalindrome(self, s: str) -> str:\r\n        if not s:\r\n            return \"\"\r\n        \r\n        longest = s[0]\r\n\r\n        # odd length\r\n        for i in range(len(s)):\r\n            edge = 1\r\n            while (i - edge) >= 0 and (i + edge) < len(s) and (s[i - edge] == s[i + edge]):\r\n                if  2*edge + 1 > len(longest):\r\n                    longest = s[i - edge:i + edge + 1]\r\n                edge += 1\r\n\r\n        # even length\r\n        for i in range(len(s) - 1):\r\n            edge = 0\r\n            while (i - edge) >= 0 and (i + 1 + edge) < len(s) and (s[i - edge] == s[i + 1 + edge]):\r\n                if  2*edge + 2 > len(longest):\r\n                    longest = s[i - edge:i + 1 + edge + 1]\r\n                edge += 1\r\n\r\n        return longest", "testcase": "(Solution().longestPalindrome(\"babad\"), \"bab\")\r\n(Solution().longestPalindrome(\"cbbd\"), \"bb\")\r\n(Solution().longestPalindrome(\"a\"), \"a\")\r\n(Solution().longestPalindrome(\"\"), \"\")\r\n(Solution().longestPalindrome(\"bb\"), \"bb\")\r\n(Solution().longestPalindrome(\"ab\"), \"a\")\r\n(Solution().longestPalindrome(\"aacabdkacaa\"), \"aca\")\r\n(Solution().longestPalindrome(\"abdka\"), \"a\")", "tags": [14, 6, 4]}}, {"model": "python_problems.problem", "pk": 34, "fields": {"title": "Palindromic Substrings", "slug": "palindromic-substrings", "difficulty": 2, "time_complexity": 3, "space_complexity": 1, "url": "https://leetcode.com/problems/palindromic-substrings/", "description": "Given a string s, return the number of palindromic substrings in it.\r\n\r\nA string is a palindrome when it reads the same backward as forward.\r\n\r\nA substring is a contiguous sequence of characters within the string.\r\n\r\nExample 1:\r\n\r\nInput: s = \"abc\"\r\nOutput: 3\r\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\r\nExample 2:\r\n\r\nInput: s = \"aaa\"\r\nOutput: 6\r\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".", "is_solved": true, "solution": "class Solution:\r\n    def __init__(self) -> None:\r\n        self.substrings_count = 0\r\n    \r\n    def countSubstrings(self, s):\r\n        len_s = len(s)\r\n\r\n        # odd length palindroms\r\n        for ind in range(len_s):\r\n            edge = 0\r\n            while ind - edge >=0 and ind + edge < len_s and s[ind - edge] == s[ind + edge]:\r\n                self.substrings_count += 1\r\n                edge += 1\r\n\r\n        # even length palindroms\r\n        for ind in range(len_s - 1):\r\n            edge = 0\r\n            while ind - edge >=0 and ind + edge + 1 < len_s and s[ind - edge] == s[ind + edge + 1]:\r\n                self.substrings_count += 1\r\n                edge += 1\r\n\r\n        return self.substrings_count", "testcase": "(Solution().countSubstrings(\"abc\"), 3)\r\n(Solution().countSubstrings(\"aaa\"), 6)", "tags": [14, 6, 4]}}, {"model": "python_problems.problem", "pk": 35, "fields": {"title": "Coin Change", "slug": "coin-change", "difficulty": 2, "time_complexity": 3, "space_complexity": 2, "url": "https://leetcode.com/problems/coin-change/", "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\r\n\r\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\r\n\r\nYou may assume that you have an infinite number of each kind of coin.\r\n\r\nExample 1:\r\n\r\nInput: coins = [1,2,5], amount = 11\r\nOutput: 3\r\nExplanation: 11 = 5 + 5 + 1\r\nExample 2:\r\n\r\nInput: coins = [2], amount = 3\r\nOutput: -1\r\nExample 3:\r\n\r\nInput: coins = [1], amount = 0\r\nOutput: 0", "is_solved": true, "solution": "# bottom up dynamic programming\r\nclass Solution:\r\n    def coinChange(self, coins: list[int], amount: int) -> int:\r\n        # Initialize min_coins array with amount + 1 which is an impossibly high number\r\n        # Index is ammount, value is the min number of coions to sum to that value\r\n        min_coins = [amount + 1] * (amount + 1)\r\n        # Base case: 0 amount requires 0 coins\r\n        min_coins[0] = 0\r\n\r\n        for curr_ammount in range(1, amount + 1):\r\n            for coin in coins:\r\n                # If the current coin can be used (i.e., doesn't make the amount negative)\r\n                if curr_ammount - coin >= 0:\r\n                    # Update the minimum coins needed for the current amount\r\n                    min_coins[curr_ammount] = min(min_coins[curr_ammount], 1 + min_coins[curr_ammount - coin])\r\n        \r\n        # If the last element is unchanged there is no single money combination to sum up.\r\n        if min_coins[amount] == amount + 1:\r\n            return -1\r\n        else:\r\n            return min_coins[amount]", "testcase": "(Solution().coinChange([1, 2, 5], 11), 3)\r\n(Solution().coinChange([2], 3), -1)\r\n(Solution().coinChange([1], 0), 0)\r\n(Solution().coinChange([2, 5, 10, 1], 27), 4)\r\n(Solution().coinChange([186, 419, 83, 408], 6249), 20)", "tags": [2, 27, 14]}}, {"model": "python_problems.problem", "pk": 36, "fields": {"title": "Maximum Product Subarray", "slug": "maximum-product-subarray", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/maximum-product-subarray/", "description": "Given an integer array nums, find a subarray that has the largest product, and return the product.\r\n\r\nThe test cases are generated so that the answer will fit in a 32-bit integer.\r\n\r\nExample 1:\r\n\r\nInput: nums = [2,3,-2,4]\r\nOutput: 6\r\nExplanation: [2,3] has the largest product 6.\r\nExample 2:\r\n\r\nInput: nums = [-2,0,-1]\r\nOutput: 0\r\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.", "is_solved": true, "solution": "class Solution:\r\n    def maxProduct(self, nums: list[int]) -> int:\r\n        curMin = 1\r\n        curMax = 1\r\n        res = nums[0]\r\n\r\n        for n in nums:\r\n            curMin, curMax = min(n * curMax, n * curMin, n), max(n * curMax, n * curMin, n)\r\n            # curMin, _, curMax = sorted((n * curMax, n * curMin, n))\r\n            # tmp = curMax * n\r\n            # curMax = max(n * curMax, n * curMin)\r\n            # curMin = min(tmp, n * curMin)\r\n            res = max(res, curMax)\r\n        return res", "testcase": "(Solution().maxProduct([2, 3, -2, 4]), 6)\r\n(Solution().maxProduct([0, 2]), 2)\r\n(Solution().maxProduct([-2]), -2)\r\n(Solution().maxProduct([-4, -3]), 12)\r\n(Solution().maxProduct([-2, 0, -1]), 0)\r\n(Solution().maxProduct([-2, -3, 7]), 42)\r\n(Solution().maxProduct([2, -5, -2, -4, 3]), 24)", "tags": [2, 14]}}, {"model": "python_problems.problem", "pk": 37, "fields": {"title": "Hedgehog", "slug": "hedgehog", "difficulty": 4, "time_complexity": 1, "space_complexity": 1, "url": "https://www.rd.com/wp-content/uploads/2021/04/GettyImages-178918471-scaled.jpg?__cf_chl_f_tk=..Fi.oYcWxgh5EdsPxTSW7VAt6QcWQYE1jKsEhpMdcM-1717111857-0.0.1.1-3604", "description": "Create a hedgehog in ASCII.", "is_solved": true, "solution": "             \\ / \\/ \\/ / ,\r\n           \\ /  \\/ \\/  \\/  / ,\r\n         \\ \\ \\/ \\/ \\/ \\ \\/ \\/ /\r\n       .\\  \\/  \\/ \\/ \\/  \\/ / / /\r\n      '  / / \\/  \\/ \\/ \\/  \\/ \\ \\/ \\\r\n   .'     ) \\/ \\/ \\/ \\/  \\/  \\/ \\ / \\\r\n  /   o    ) \\/ \\/ \\/ \\/ \\/ \\/ \\// /\r\no'_ ',__ .'   ,.,.,.,.,.,.,.,'- '%\r\n         // \\\\          // \\\\       \r\n        ''  ''         ''  ''", "testcase": "(Solution().hedgehog(), 0)", "tags": [28]}}, {"model": "python_problems.problem", "pk": 38, "fields": {"title": "Word Break", "slug": "word-break", "difficulty": 2, "time_complexity": 3, "space_complexity": 2, "url": "https://leetcode.com/problems/word-break/", "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\r\n\r\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\r\n\r\nExample 1:\r\n\r\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\r\nOutput: true\r\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\r\nExample 2:\r\n\r\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\r\nOutput: true\r\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\r\nNote that you are allowed to reuse a dictionary word.\r\nExample 3:\r\n\r\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\r\nOutput: false", "is_solved": true, "solution": "class Solution:\r\n    def wordBreak(self, s: str, wordDict: list[str]) -> bool:\r\n        can_segment = [False] * len(s)\r\n        can_segment.append(True)\r\n        wordSet = set(wordDict)\r\n\r\n        for ind in range(len(s))[::-1]:\r\n            for word in wordSet:\r\n                if word == s[ind: ind + len(word)]:\r\n                    if can_segment[ind + len(word)]:\r\n                        can_segment[ind] = True\r\n                        break\r\n\r\n        return can_segment[0]", "testcase": "(Solution().wordBreak(\"leetcode\", [\"leet\", \"code\"]), True)\r\n(Solution().wordBreak(\"cars\", [\"car\", \"ca\", \"rs\"]), True)", "tags": [2, 14, 3, 26, 6, 29]}}, {"model": "python_problems.problem", "pk": 39, "fields": {"title": "Longest Increasing Subsequence", "slug": "longest-increasing-subsequence", "difficulty": 2, "time_complexity": 3, "space_complexity": 1, "url": "https://leetcode.com/problems/longest-increasing-subsequence/", "description": "Given an integer array nums, return the length of the longest strictly increasing \r\nsubsequence\r\n\r\nExample 1:\r\n\r\nInput: nums = [10,9,2,5,3,7,101,18]\r\nOutput: 4\r\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\r\nExample 2:\r\n\r\nInput: nums = [0,1,0,3,2,3]\r\nOutput: 4\r\nExample 3:\r\n\r\nInput: nums = [7,7,7,7,7,7,7]\r\nOutput: 1", "is_solved": true, "solution": "class Solution:\r\n    def lengthOfLIS(self, nums: list[int]) -> int:\r\n        lis_lengths = [1] * len(nums)\r\n        \r\n        for i in range(len(nums)):\r\n            for j in range(i):\r\n                if nums[j] < nums[i]:\r\n                    lis_lengths[i] = max(lis_lengths[i], lis_lengths[j] + 1)\r\n\r\n        return max(lis_lengths)", "testcase": "(Solution().lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18]), 4)\r\n(Solution().lengthOfLIS([0, 1, 0, 3, 2, 3]), 4)\r\n(Solution().lengthOfLIS([7, 7, 7, 7, 7, 7, 7]), 1)", "tags": [2, 5, 14]}}, {"model": "python_problems.problem", "pk": 40, "fields": {"title": "Partition Equal Subset Sum", "slug": "partition-equal-subset-sum", "difficulty": 2, "time_complexity": 3, "space_complexity": 2, "url": "https://leetcode.com/problems/partition-equal-subset-sum", "description": "Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\r\n\r\nExample 1:\r\n\r\nInput: nums = [1,5,11,5]\r\nOutput: true\r\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\r\n\r\nExample 2:\r\n\r\nInput: nums = [1,2,3,5]\r\nOutput: false\r\nExplanation: The array cannot be partitioned into equal sum subsets.", "is_solved": true, "solution": "class Solution:\r\n    def canPartition(self, nums: list[int]) -> bool:\r\n        if sum(nums) % 2:\r\n            return False\r\n        \r\n        target = sum(nums) // 2\r\n        possible_sums = {0}\r\n\r\n        for num in nums:\r\n            if target in possible_sums:\r\n                return True\r\n            \r\n            seen_chunk = set()\r\n            for s in possible_sums:\r\n                seen_chunk.add(s + num)\r\n            possible_sums.update(seen_chunk)\r\n            \r\n            # update possible_sums in one line\r\n            # possible_sums.update({s + num for s in possible_sums})\r\n            \r\n        return False", "testcase": "(Solution().canPartition([1, 5, 11, 5]), True)\r\n(Solution().canPartition([3, 3, 3, 4, 5]), True)\r\n(Solution().canPartition([1, 2, 5]), False)\r\n(Solution().canPartition([1, 2, 3, 5]), False)\r\n(Solution().canPartition([1]), False)", "tags": [2, 14]}}, {"model": "python_problems.problem", "pk": 41, "fields": {"title": "Longest Common Subsequence", "slug": "longest-common-subsequence", "difficulty": 2, "time_complexity": 3, "space_complexity": 3, "url": "https://leetcode.com/problems/longest-common-subsequence/", "description": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\r\n\r\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\r\n\r\nFor example, \"ace\" is a subsequence of \"abcde\".\r\nA common subsequence of two strings is a subsequence that is common to both strings.\r\n\r\nExample 1:\r\n\r\nInput: text1 = \"abcde\", text2 = \"ace\" \r\nOutput: 3  \r\nExplanation: The longest common subsequence is \"ace\" and its length is 3.\r\nExample 2:\r\n\r\nInput: text1 = \"abc\", text2 = \"abc\"\r\nOutput: 3\r\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\r\nExample 3:\r\n\r\nInput: text1 = \"abc\", text2 = \"def\"\r\nOutput: 0\r\nExplanation: There is no such common subsequence, so the result is 0.", "is_solved": true, "solution": "class Solution:\r\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\r\n        # dp = [[0] * (len(text1) + 1)] * (len(text2) + 1)  creates a list of lists where each sublist is a reference to the same list. This means that updating one element in any sublist will affect all sublists.\r\n        dp = [[0] * (len(text1) + 1) for _ in range(len(text2) + 1)]\r\n\r\n        for i in range(len(text2))[::-1]:\r\n            for j in range(len(text1))[::-1]:\r\n                if text2[i] == text1[j]:\r\n                    dp[i][j] = dp[i + 1][j + 1] + 1\r\n                else:\r\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\r\n\r\n        return dp[0][0]", "testcase": "(Solution().longestCommonSubsequence(\"abcde\", \"ace\"), 3)\r\n(Solution().longestCommonSubsequence(\"abc\", \"abc\"), 3)\r\n(Solution().longestCommonSubsequence(\"abc\", \"dew\"), 0)\r\n(Solution().longestCommonSubsequence(\"bsbininm\", \"jmjkbkjkv\"), 1)", "tags": [14, 6]}}, {"model": "python_problems.problem", "pk": 42, "fields": {"title": "Maximum Subarray", "slug": "maximum-subarray", "difficulty": 2, "time_complexity": 2, "space_complexity": 1, "url": "https://leetcode.com/problems/maximum-subarray/", "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\r\n\r\nExample 1:\r\n\r\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\r\nOutput: 6\r\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\r\nExample 2:\r\n\r\nInput: nums = [1]\r\nOutput: 1\r\nExplanation: The subarray [1] has the largest sum 1.\r\nExample 3:\r\n\r\nInput: nums = [5,4,-1,7,8]\r\nOutput: 23\r\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.", "is_solved": true, "solution": "class Solution:\r\n    def maxSubArray(self, nums: list[int]) -> int:\r\n        max_sum = nums[0]\r\n        curr_sum = nums[0]\r\n\r\n        for num in nums[1:]:\r\n            curr_sum = max(curr_sum + num, num)\r\n            max_sum = max(max_sum, curr_sum)\r\n    \r\n        return max_sum", "testcase": "(Solution().maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6)\r\n(Solution().maxSubArray([1]), 1)\r\n(Solution().maxSubArray([5, 4, -1, 7, 8]), 23)\r\n(Solution().maxSubArray([-4, -2, -1, -3]), -1)", "tags": [2, 18, 14]}}, {"model": "python_problems.tag", "pk": 2, "fields": {"name": "Array"}}, {"model": "python_problems.tag", "pk": 3, "fields": {"name": "Hash Table"}}, {"model": "python_problems.tag", "pk": 4, "fields": {"name": "Two Pointers"}}, {"model": "python_problems.tag", "pk": 5, "fields": {"name": "Binary Search"}}, {"model": "python_problems.tag", "pk": 6, "fields": {"name": "String"}}, {"model": "python_problems.tag", "pk": 7, "fields": {"name": "Stack"}}, {"model": "python_problems.tag", "pk": 8, "fields": {"name": "Math"}}, {"model": "python_problems.tag", "pk": 10, "fields": {"name": "Greedy"}}, {"model": "python_problems.tag", "pk": 11, "fields": {"name": "Counting"}}, {"model": "python_problems.tag", "pk": 13, "fields": {"name": "Combinatorics"}}, {"model": "python_problems.tag", "pk": 14, "fields": {"name": "Dynamic Programming"}}, {"model": "python_problems.tag", "pk": 17, "fields": {"name": "Sorting"}}, {"model": "python_problems.tag", "pk": 18, "fields": {"name": "Divide and Conquer"}}, {"model": "python_problems.tag", "pk": 19, "fields": {"name": "Heap, Priority Queue"}}, {"model": "python_problems.tag", "pk": 20, "fields": {"name": "Bucket Sort"}}, {"model": "python_problems.tag", "pk": 21, "fields": {"name": "Quickselect"}}, {"model": "python_problems.tag", "pk": 22, "fields": {"name": "Union Find"}}, {"model": "python_problems.tag", "pk": 23, "fields": {"name": "Enumeration"}}, {"model": "python_problems.tag", "pk": 24, "fields": {"name": "Sliding Window"}}, {"model": "python_problems.tag", "pk": 25, "fields": {"name": "Monotonic Stack"}}, {"model": "python_problems.tag", "pk": 26, "fields": {"name": "Memoization"}}, {"model": "python_problems.tag", "pk": 27, "fields": {"name": "Breadth-First Search"}}, {"model": "python_problems.tag", "pk": 28, "fields": {"name": "WTF"}}, {"model": "python_problems.tag", "pk": 29, "fields": {"name": "Trie"}}, {"model": "sql_problems.difficulty", "pk": 1, "fields": {"name": "Easy"}}, {"model": "sql_problems.difficulty", "pk": 2, "fields": {"name": "Medium"}}, {"model": "sql_problems.difficulty", "pk": 3, "fields": {"name": "Hard"}}, {"model": "sql_problems.problem", "pk": 1, "fields": {"title": "Combine Two Tables", "difficulty": 1, "url": "https://leetcode.com/problems/combine-two-tables/", "description": "Table: Person\r\n\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| personId    | int     |\r\n| lastName    | varchar |\r\n| firstName   | varchar |\r\n+-------------+---------+\r\npersonId is the primary key (column with unique values) for this table.\r\nThis table contains information about the ID of some persons and their first and last names.\r\n \r\n\r\nTable: Address\r\n\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| addressId   | int     |\r\n| personId    | int     |\r\n| city        | varchar |\r\n| state       | varchar |\r\n+-------------+---------+\r\naddressId is the primary key (column with unique values) for this table.\r\nEach row of this table contains information about the city and state of one person with ID = PersonId.\r\n \r\n\r\nWrite a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, repo", "is_solved": true, "solution_my": "SELECT p.firstName, p.lastName, a.city, a.state\r\nFROM Person AS p\r\nLEFT JOIN Address AS a USING(personID)\r\n-- LEFT JOIN Address AS a ON a.personID = p.personID", "solution_pd": "import pandas as pd\r\n\r\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\r\n    sol_df = pd.merge(person, address, how=\"left\", on=[\"personId\"])\r\n    return sol_df[[\"firstName\", \"lastName\", \"city\", \"state\"]]\r\n    # return person.merge(address, how=\"left\", on=[\"personId\"])[[\"firstName\", \"lastName\", \"city\", \"state\"]]", "testcase": "Input: \r\nPerson table:\r\n+----------+----------+-----------+\r\n| personId | lastName | firstName |\r\n+----------+----------+-----------+\r\n| 1        | Wang     | Allen     |\r\n| 2        | Alice    | Bob       |\r\n+----------+----------+-----------+\r\nAddress table:\r\n+-----------+----------+---------------+------------+\r\n| addressId | personId | city          | state      |\r\n+-----------+----------+---------------+------------+\r\n| 1         | 2        | New York City | New York   |\r\n| 2         | 3        | Leetcode      | California |\r\n+-----------+----------+---------------+------------+\r\n\r\nOutput: \r\n+-----------+----------+---------------+----------+\r\n| firstName | lastName | city          | state    |\r\n+-----------+----------+---------------+----------+\r\n| Allen     | Wang     | Null          | Null     |\r\n| Bob       | Alice    | New York City | New York |\r\n+-----------+----------+---------------+----------+", "tags": [1]}}, {"model": "sql_problems.tag", "pk": 1, "fields": {"name": "Database"}}, {"model": "forums.bugforum", "pk": 1, "fields": {"title": "Duplicated tag :(", "text": "None", "owner": 4, "created_at": "2024-06-10T18:53:15.406Z", "updated_at": "2024-06-10T18:53:15.419Z"}}, {"model": "forums.bugcomment", "pk": 1, "fields": {"text": "Fixed. Tag is now unique.", "forum": 1, "owner": 3, "created_at": "2024-06-11T19:30:02.151Z", "updated_at": "2024-06-11T19:30:02.151Z"}}, {"model": "forums.featureforum", "pk": 1, "fields": {"title": "Remove duplicated tags :(", "text": "None", "owner": 4, "created_at": "2024-06-10T18:53:44.018Z", "updated_at": "2024-06-10T18:53:44.031Z"}}, {"model": "forums.featurecomment", "pk": 1, "fields": {"text": "Fixed. Tag is now unique.", "forum": 1, "owner": 3, "created_at": "2024-06-11T19:30:46.638Z", "updated_at": "2024-06-11T19:30:46.638Z"}}]