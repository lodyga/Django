restricted_globals = {
                '__builtins__': {
                    'None': None,
                    'False': False,
                    'True': True,
                    'bool': bool,
                    'dict': dict,
                    'list': list,
                    'int': int,
                    'float': float,
                    'str': str,
                    'print': print,
                    'range': range,
                    'len': len,
                    'enumerate': enumerate,
                    'zip': zip,
                    'map': map,
                    'filter': filter,
                    'all': all,
                    'any': any,
                    'sum': sum,
                    'min': min,
                    'max': max,
                    'abs': abs,
                    'round': round,
                    'isinstance': isinstance,
                    'type': type,
                    'sorted': sorted,
                    '__build_class__': __build_class__,  # Allow class creation
                    '__metaclass__': type,  # Allow metaclass
                    '__name__': __name__,

                },
                '_getiter_': default_guarded_getiter,
                '_getitem_': default_guarded_getitem,
                '_getattr_': safer_getattr,
                '_print_': PrintCollector,
                '_unpack_sequence_': guarded_unpack_sequence,
                '_iter_unpack_sequence_': guarded_iter_unpack_sequence,
                '_write_': full_write_guard,
            }


collapsable left bar list with Search bar, Edit/info bar
what happen when I delete a solution


search by tag/lang bar

Appearance hide Text Small Standard Large Width Standard Wide





# generate empty migration
py manage.py makemigrations --empty python_problems --name populate_slugs


# backup/restore db witm a script
# backup db.sqlite3
python manage.py dumpdata > fixtures/db_data.json
# restore
py manage.py load_db fixtures/db_data.json 

# backup/restore db without a script
# backup
py manage.py dumpdata > db.json
# restore
# To load data without load_db.py first delete ContentType after migrate
from django.contrib.contenttypes.models import ContentType
# Delete all content types
ContentType.objects.all().delete()
py manage.py loaddata db.json


# Run and Debug create a lunch.json file, creates .vscode/lunch.json

# Docker:Add Docker Files to Workspace, creates Dockerfile, .dockerignore, .vscode/lunch.json, .vscode/tasks.json







In [28]: Problem.objects.get(title='Two Sum').solutions.get(pk=41)
Out[28]: <Solution: Two Sum (JavaScript)>

In [38]: Problem.objects.get(title='Two Sum').solutions.get(pk=41).solution
Out[38]: '// Using Plain Object:\r\nvar twoSum = (nums, target) => {\r\n    const seen = {}\r\n\r\n    for (let ind = 0; ind < nums.length; ind++) {\r\n        const num = nums[ind];\r\n        const diff = target - num;\r\n\r\n        if (diff in seen) {\r\n            return [seen[diff], ind];\r\n        }\r\n        seen[num] = ind;\r\n    }\r\n\r\n    return [-1, -1]\r\n};'

In [3]: Problem.objects.get(title='Two Sum').solutions_problem.all()
Out[3]: <QuerySet [<Solution: Two Sum (Python)>, <Solution: Two Sum (JavaScript)>]>

In [11]: Problem.objects.get(title='Two Sum').languages.values()
Out[11]: <QuerySet [{'id': 1, 'name': 'Python'}, {'id': 2, 'name': 'JavaScript'}]>

# Reason to add Soulution to a Problem, actually not because it forces Solution while upadating Problem.
In [36]: Problem.objects.get(title='Two Sum').solutions.all()
Out[36]: <QuerySet [<Solution: Two Sum (Python)>, <Solution: Two Sum (JavaScript)>]>
In [37]: Problem.objects.get(title='Sum of Pairs').solutions.all()
Out[37]: <QuerySet []>

In [19]: Problem.objects.get(title="Two Sum").solutions_problem.get(language=Language.objects.get(name="Python"))
Out[19]: <Solution: Two Sum (Python)>

In [5]: Problem.objects.get(title="Two Sum").solutions_problem.all()
Out[5]: <QuerySet [<Solution: Two Sum (Python)>, <Solution: Two Sum (JavaScript)>]>

Fixed bug where "grouped_anagrams.values()" from Group Anagrams problem returned "dict_values object" which caused function to run indefinetly'
Fixed bug where returning "grouped_anagrams.values()" from Group Anagrams problem caused function to run indefinitely by converting to list.


{% for solution in problem.solutions_problem.all %}
 <strong>Language:</strong> {{ solution.language.name }}<br>
 <pre>{{ solution.solution }}</pre>
{% endfor %}

# context["code_form"] = code_form
# print(output_form.initial.get("output_area"))
# print(output_form.initial["output_area"])
# print(output_form["output_area"].value())
# print(dir(output_form))
# print(output_form.__dict__)
# print(output_form.__dict__.get("initial").get("output_area"))
# print(output_form.fields.get("output_area").widget.attrs.get("placeholder"))

"""
print(output_form.__dict__):
{'is_bound': False, 'data': <MultiValueDict: {}>, 'files': <MultiValueDict: {}>, 'auto_id': 'id_%s', 'initial': {'output_area': "Error: 'output'"}, 'error_class': <class 'django.forms.utils.ErrorList'>, 'label_suffix': ':', 'empty_permitted': False, '_errors': None, 'fields': {'output_area': <django.forms.fields.CharField object at 0x7832c705b1f0>}, '_bound_fields_cache': {}, 'renderer': <django.forms.renderers.DjangoTemplates object at 0x7832c701b0a0>}

"""

# hack my site
import os
cwd = os.getcwd()
f = open(cwd+'/'+'aaaaa.txt', 'w') # write a file
f.write('Hello\nWorld\nnew\n')
f.close()
output = cwd









